// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "github.com/lyn0904/spine-go/model"
	mock "github.com/stretchr/testify/mock"
)

// DeviceConfigurationCommonInterface is an autogenerated mock type for the DeviceConfigurationCommonInterface type
type DeviceConfigurationCommonInterface struct {
	mock.Mock
}

type DeviceConfigurationCommonInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *DeviceConfigurationCommonInterface) EXPECT() *DeviceConfigurationCommonInterface_Expecter {
	return &DeviceConfigurationCommonInterface_Expecter{mock: &_m.Mock}
}

// CheckEventPayloadDataForFilter provides a mock function with given fields: payloadData, filter
func (_m *DeviceConfigurationCommonInterface) CheckEventPayloadDataForFilter(payloadData interface{}, filter interface{}) bool {
	ret := _m.Called(payloadData, filter)

	if len(ret) == 0 {
		panic("no return value specified for CheckEventPayloadDataForFilter")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) bool); ok {
		r0 = rf(payloadData, filter)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeviceConfigurationCommonInterface_CheckEventPayloadDataForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckEventPayloadDataForFilter'
type DeviceConfigurationCommonInterface_CheckEventPayloadDataForFilter_Call struct {
	*mock.Call
}

// CheckEventPayloadDataForFilter is a helper method to define mock.On call
//   - payloadData interface{}
//   - filter interface{}
func (_e *DeviceConfigurationCommonInterface_Expecter) CheckEventPayloadDataForFilter(payloadData interface{}, filter interface{}) *DeviceConfigurationCommonInterface_CheckEventPayloadDataForFilter_Call {
	return &DeviceConfigurationCommonInterface_CheckEventPayloadDataForFilter_Call{Call: _e.mock.On("CheckEventPayloadDataForFilter", payloadData, filter)}
}

func (_c *DeviceConfigurationCommonInterface_CheckEventPayloadDataForFilter_Call) Run(run func(payloadData interface{}, filter interface{})) *DeviceConfigurationCommonInterface_CheckEventPayloadDataForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *DeviceConfigurationCommonInterface_CheckEventPayloadDataForFilter_Call) Return(_a0 bool) *DeviceConfigurationCommonInterface_CheckEventPayloadDataForFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceConfigurationCommonInterface_CheckEventPayloadDataForFilter_Call) RunAndReturn(run func(interface{}, interface{}) bool) *DeviceConfigurationCommonInterface_CheckEventPayloadDataForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeyValueDataForFilter provides a mock function with given fields: filter
func (_m *DeviceConfigurationCommonInterface) GetKeyValueDataForFilter(filter model.DeviceConfigurationKeyValueDescriptionDataType) (*model.DeviceConfigurationKeyValueDataType, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyValueDataForFilter")
	}

	var r0 *model.DeviceConfigurationKeyValueDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyValueDescriptionDataType) (*model.DeviceConfigurationKeyValueDataType, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyValueDescriptionDataType) *model.DeviceConfigurationKeyValueDataType); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeviceConfigurationKeyValueDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.DeviceConfigurationKeyValueDescriptionDataType) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceConfigurationCommonInterface_GetKeyValueDataForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeyValueDataForFilter'
type DeviceConfigurationCommonInterface_GetKeyValueDataForFilter_Call struct {
	*mock.Call
}

// GetKeyValueDataForFilter is a helper method to define mock.On call
//   - filter model.DeviceConfigurationKeyValueDescriptionDataType
func (_e *DeviceConfigurationCommonInterface_Expecter) GetKeyValueDataForFilter(filter interface{}) *DeviceConfigurationCommonInterface_GetKeyValueDataForFilter_Call {
	return &DeviceConfigurationCommonInterface_GetKeyValueDataForFilter_Call{Call: _e.mock.On("GetKeyValueDataForFilter", filter)}
}

func (_c *DeviceConfigurationCommonInterface_GetKeyValueDataForFilter_Call) Run(run func(filter model.DeviceConfigurationKeyValueDescriptionDataType)) *DeviceConfigurationCommonInterface_GetKeyValueDataForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.DeviceConfigurationKeyValueDescriptionDataType))
	})
	return _c
}

func (_c *DeviceConfigurationCommonInterface_GetKeyValueDataForFilter_Call) Return(_a0 *model.DeviceConfigurationKeyValueDataType, _a1 error) *DeviceConfigurationCommonInterface_GetKeyValueDataForFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeviceConfigurationCommonInterface_GetKeyValueDataForFilter_Call) RunAndReturn(run func(model.DeviceConfigurationKeyValueDescriptionDataType) (*model.DeviceConfigurationKeyValueDataType, error)) *DeviceConfigurationCommonInterface_GetKeyValueDataForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeyValueDataForKeyId provides a mock function with given fields: keyId
func (_m *DeviceConfigurationCommonInterface) GetKeyValueDataForKeyId(keyId model.DeviceConfigurationKeyIdType) (*model.DeviceConfigurationKeyValueDataType, error) {
	ret := _m.Called(keyId)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyValueDataForKeyId")
	}

	var r0 *model.DeviceConfigurationKeyValueDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyIdType) (*model.DeviceConfigurationKeyValueDataType, error)); ok {
		return rf(keyId)
	}
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyIdType) *model.DeviceConfigurationKeyValueDataType); ok {
		r0 = rf(keyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeviceConfigurationKeyValueDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.DeviceConfigurationKeyIdType) error); ok {
		r1 = rf(keyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceConfigurationCommonInterface_GetKeyValueDataForKeyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeyValueDataForKeyId'
type DeviceConfigurationCommonInterface_GetKeyValueDataForKeyId_Call struct {
	*mock.Call
}

// GetKeyValueDataForKeyId is a helper method to define mock.On call
//   - keyId model.DeviceConfigurationKeyIdType
func (_e *DeviceConfigurationCommonInterface_Expecter) GetKeyValueDataForKeyId(keyId interface{}) *DeviceConfigurationCommonInterface_GetKeyValueDataForKeyId_Call {
	return &DeviceConfigurationCommonInterface_GetKeyValueDataForKeyId_Call{Call: _e.mock.On("GetKeyValueDataForKeyId", keyId)}
}

func (_c *DeviceConfigurationCommonInterface_GetKeyValueDataForKeyId_Call) Run(run func(keyId model.DeviceConfigurationKeyIdType)) *DeviceConfigurationCommonInterface_GetKeyValueDataForKeyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.DeviceConfigurationKeyIdType))
	})
	return _c
}

func (_c *DeviceConfigurationCommonInterface_GetKeyValueDataForKeyId_Call) Return(_a0 *model.DeviceConfigurationKeyValueDataType, _a1 error) *DeviceConfigurationCommonInterface_GetKeyValueDataForKeyId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeviceConfigurationCommonInterface_GetKeyValueDataForKeyId_Call) RunAndReturn(run func(model.DeviceConfigurationKeyIdType) (*model.DeviceConfigurationKeyValueDataType, error)) *DeviceConfigurationCommonInterface_GetKeyValueDataForKeyId_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeyValueDescriptionFoKeyId provides a mock function with given fields: keyId
func (_m *DeviceConfigurationCommonInterface) GetKeyValueDescriptionFoKeyId(keyId model.DeviceConfigurationKeyIdType) (*model.DeviceConfigurationKeyValueDescriptionDataType, error) {
	ret := _m.Called(keyId)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyValueDescriptionFoKeyId")
	}

	var r0 *model.DeviceConfigurationKeyValueDescriptionDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyIdType) (*model.DeviceConfigurationKeyValueDescriptionDataType, error)); ok {
		return rf(keyId)
	}
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyIdType) *model.DeviceConfigurationKeyValueDescriptionDataType); ok {
		r0 = rf(keyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeviceConfigurationKeyValueDescriptionDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.DeviceConfigurationKeyIdType) error); ok {
		r1 = rf(keyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceConfigurationCommonInterface_GetKeyValueDescriptionFoKeyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeyValueDescriptionFoKeyId'
type DeviceConfigurationCommonInterface_GetKeyValueDescriptionFoKeyId_Call struct {
	*mock.Call
}

// GetKeyValueDescriptionFoKeyId is a helper method to define mock.On call
//   - keyId model.DeviceConfigurationKeyIdType
func (_e *DeviceConfigurationCommonInterface_Expecter) GetKeyValueDescriptionFoKeyId(keyId interface{}) *DeviceConfigurationCommonInterface_GetKeyValueDescriptionFoKeyId_Call {
	return &DeviceConfigurationCommonInterface_GetKeyValueDescriptionFoKeyId_Call{Call: _e.mock.On("GetKeyValueDescriptionFoKeyId", keyId)}
}

func (_c *DeviceConfigurationCommonInterface_GetKeyValueDescriptionFoKeyId_Call) Run(run func(keyId model.DeviceConfigurationKeyIdType)) *DeviceConfigurationCommonInterface_GetKeyValueDescriptionFoKeyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.DeviceConfigurationKeyIdType))
	})
	return _c
}

func (_c *DeviceConfigurationCommonInterface_GetKeyValueDescriptionFoKeyId_Call) Return(_a0 *model.DeviceConfigurationKeyValueDescriptionDataType, _a1 error) *DeviceConfigurationCommonInterface_GetKeyValueDescriptionFoKeyId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeviceConfigurationCommonInterface_GetKeyValueDescriptionFoKeyId_Call) RunAndReturn(run func(model.DeviceConfigurationKeyIdType) (*model.DeviceConfigurationKeyValueDescriptionDataType, error)) *DeviceConfigurationCommonInterface_GetKeyValueDescriptionFoKeyId_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeyValueDescriptionsForFilter provides a mock function with given fields: filter
func (_m *DeviceConfigurationCommonInterface) GetKeyValueDescriptionsForFilter(filter model.DeviceConfigurationKeyValueDescriptionDataType) ([]model.DeviceConfigurationKeyValueDescriptionDataType, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyValueDescriptionsForFilter")
	}

	var r0 []model.DeviceConfigurationKeyValueDescriptionDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyValueDescriptionDataType) ([]model.DeviceConfigurationKeyValueDescriptionDataType, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyValueDescriptionDataType) []model.DeviceConfigurationKeyValueDescriptionDataType); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.DeviceConfigurationKeyValueDescriptionDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.DeviceConfigurationKeyValueDescriptionDataType) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceConfigurationCommonInterface_GetKeyValueDescriptionsForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeyValueDescriptionsForFilter'
type DeviceConfigurationCommonInterface_GetKeyValueDescriptionsForFilter_Call struct {
	*mock.Call
}

// GetKeyValueDescriptionsForFilter is a helper method to define mock.On call
//   - filter model.DeviceConfigurationKeyValueDescriptionDataType
func (_e *DeviceConfigurationCommonInterface_Expecter) GetKeyValueDescriptionsForFilter(filter interface{}) *DeviceConfigurationCommonInterface_GetKeyValueDescriptionsForFilter_Call {
	return &DeviceConfigurationCommonInterface_GetKeyValueDescriptionsForFilter_Call{Call: _e.mock.On("GetKeyValueDescriptionsForFilter", filter)}
}

func (_c *DeviceConfigurationCommonInterface_GetKeyValueDescriptionsForFilter_Call) Run(run func(filter model.DeviceConfigurationKeyValueDescriptionDataType)) *DeviceConfigurationCommonInterface_GetKeyValueDescriptionsForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.DeviceConfigurationKeyValueDescriptionDataType))
	})
	return _c
}

func (_c *DeviceConfigurationCommonInterface_GetKeyValueDescriptionsForFilter_Call) Return(_a0 []model.DeviceConfigurationKeyValueDescriptionDataType, _a1 error) *DeviceConfigurationCommonInterface_GetKeyValueDescriptionsForFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeviceConfigurationCommonInterface_GetKeyValueDescriptionsForFilter_Call) RunAndReturn(run func(model.DeviceConfigurationKeyValueDescriptionDataType) ([]model.DeviceConfigurationKeyValueDescriptionDataType, error)) *DeviceConfigurationCommonInterface_GetKeyValueDescriptionsForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeviceConfigurationCommonInterface creates a new instance of DeviceConfigurationCommonInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceConfigurationCommonInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceConfigurationCommonInterface {
	mock := &DeviceConfigurationCommonInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
