// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/eebus-go/api"
	mock "github.com/stretchr/testify/mock"

	ship_goapi "github.com/lyn0904/ship-go/api"
)

// ServiceReaderInterface is an autogenerated mock type for the ServiceReaderInterface type
type ServiceReaderInterface struct {
	mock.Mock
}

type ServiceReaderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceReaderInterface) EXPECT() *ServiceReaderInterface_Expecter {
	return &ServiceReaderInterface_Expecter{mock: &_m.Mock}
}

// RemoteSKIConnected provides a mock function with given fields: service, ski
func (_m *ServiceReaderInterface) RemoteSKIConnected(service api.ServiceInterface, ski string) {
	_m.Called(service, ski)
}

// ServiceReaderInterface_RemoteSKIConnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteSKIConnected'
type ServiceReaderInterface_RemoteSKIConnected_Call struct {
	*mock.Call
}

// RemoteSKIConnected is a helper method to define mock.On call
//   - service api.ServiceInterface
//   - ski string
func (_e *ServiceReaderInterface_Expecter) RemoteSKIConnected(service interface{}, ski interface{}) *ServiceReaderInterface_RemoteSKIConnected_Call {
	return &ServiceReaderInterface_RemoteSKIConnected_Call{Call: _e.mock.On("RemoteSKIConnected", service, ski)}
}

func (_c *ServiceReaderInterface_RemoteSKIConnected_Call) Run(run func(service api.ServiceInterface, ski string)) *ServiceReaderInterface_RemoteSKIConnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.ServiceInterface), args[1].(string))
	})
	return _c
}

func (_c *ServiceReaderInterface_RemoteSKIConnected_Call) Return() *ServiceReaderInterface_RemoteSKIConnected_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceReaderInterface_RemoteSKIConnected_Call) RunAndReturn(run func(api.ServiceInterface, string)) *ServiceReaderInterface_RemoteSKIConnected_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteSKIDisconnected provides a mock function with given fields: service, ski
func (_m *ServiceReaderInterface) RemoteSKIDisconnected(service api.ServiceInterface, ski string) {
	_m.Called(service, ski)
}

// ServiceReaderInterface_RemoteSKIDisconnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteSKIDisconnected'
type ServiceReaderInterface_RemoteSKIDisconnected_Call struct {
	*mock.Call
}

// RemoteSKIDisconnected is a helper method to define mock.On call
//   - service api.ServiceInterface
//   - ski string
func (_e *ServiceReaderInterface_Expecter) RemoteSKIDisconnected(service interface{}, ski interface{}) *ServiceReaderInterface_RemoteSKIDisconnected_Call {
	return &ServiceReaderInterface_RemoteSKIDisconnected_Call{Call: _e.mock.On("RemoteSKIDisconnected", service, ski)}
}

func (_c *ServiceReaderInterface_RemoteSKIDisconnected_Call) Run(run func(service api.ServiceInterface, ski string)) *ServiceReaderInterface_RemoteSKIDisconnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.ServiceInterface), args[1].(string))
	})
	return _c
}

func (_c *ServiceReaderInterface_RemoteSKIDisconnected_Call) Return() *ServiceReaderInterface_RemoteSKIDisconnected_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceReaderInterface_RemoteSKIDisconnected_Call) RunAndReturn(run func(api.ServiceInterface, string)) *ServiceReaderInterface_RemoteSKIDisconnected_Call {
	_c.Call.Return(run)
	return _c
}

// ServicePairingDetailUpdate provides a mock function with given fields: ski, detail
func (_m *ServiceReaderInterface) ServicePairingDetailUpdate(ski string, detail *ship_goapi.ConnectionStateDetail) {
	_m.Called(ski, detail)
}

// ServiceReaderInterface_ServicePairingDetailUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServicePairingDetailUpdate'
type ServiceReaderInterface_ServicePairingDetailUpdate_Call struct {
	*mock.Call
}

// ServicePairingDetailUpdate is a helper method to define mock.On call
//   - ski string
//   - detail *ship_goapi.ConnectionStateDetail
func (_e *ServiceReaderInterface_Expecter) ServicePairingDetailUpdate(ski interface{}, detail interface{}) *ServiceReaderInterface_ServicePairingDetailUpdate_Call {
	return &ServiceReaderInterface_ServicePairingDetailUpdate_Call{Call: _e.mock.On("ServicePairingDetailUpdate", ski, detail)}
}

func (_c *ServiceReaderInterface_ServicePairingDetailUpdate_Call) Run(run func(ski string, detail *ship_goapi.ConnectionStateDetail)) *ServiceReaderInterface_ServicePairingDetailUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*ship_goapi.ConnectionStateDetail))
	})
	return _c
}

func (_c *ServiceReaderInterface_ServicePairingDetailUpdate_Call) Return() *ServiceReaderInterface_ServicePairingDetailUpdate_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceReaderInterface_ServicePairingDetailUpdate_Call) RunAndReturn(run func(string, *ship_goapi.ConnectionStateDetail)) *ServiceReaderInterface_ServicePairingDetailUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceShipIDUpdate provides a mock function with given fields: ski, shipdID
func (_m *ServiceReaderInterface) ServiceShipIDUpdate(ski string, shipdID string) {
	_m.Called(ski, shipdID)
}

// ServiceReaderInterface_ServiceShipIDUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceShipIDUpdate'
type ServiceReaderInterface_ServiceShipIDUpdate_Call struct {
	*mock.Call
}

// ServiceShipIDUpdate is a helper method to define mock.On call
//   - ski string
//   - shipdID string
func (_e *ServiceReaderInterface_Expecter) ServiceShipIDUpdate(ski interface{}, shipdID interface{}) *ServiceReaderInterface_ServiceShipIDUpdate_Call {
	return &ServiceReaderInterface_ServiceShipIDUpdate_Call{Call: _e.mock.On("ServiceShipIDUpdate", ski, shipdID)}
}

func (_c *ServiceReaderInterface_ServiceShipIDUpdate_Call) Run(run func(ski string, shipdID string)) *ServiceReaderInterface_ServiceShipIDUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ServiceReaderInterface_ServiceShipIDUpdate_Call) Return() *ServiceReaderInterface_ServiceShipIDUpdate_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceReaderInterface_ServiceShipIDUpdate_Call) RunAndReturn(run func(string, string)) *ServiceReaderInterface_ServiceShipIDUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// VisibleRemoteServicesUpdated provides a mock function with given fields: service, entries
func (_m *ServiceReaderInterface) VisibleRemoteServicesUpdated(service api.ServiceInterface, entries []ship_goapi.RemoteService) {
	_m.Called(service, entries)
}

// ServiceReaderInterface_VisibleRemoteServicesUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisibleRemoteServicesUpdated'
type ServiceReaderInterface_VisibleRemoteServicesUpdated_Call struct {
	*mock.Call
}

// VisibleRemoteServicesUpdated is a helper method to define mock.On call
//   - service api.ServiceInterface
//   - entries []ship_goapi.RemoteService
func (_e *ServiceReaderInterface_Expecter) VisibleRemoteServicesUpdated(service interface{}, entries interface{}) *ServiceReaderInterface_VisibleRemoteServicesUpdated_Call {
	return &ServiceReaderInterface_VisibleRemoteServicesUpdated_Call{Call: _e.mock.On("VisibleRemoteServicesUpdated", service, entries)}
}

func (_c *ServiceReaderInterface_VisibleRemoteServicesUpdated_Call) Run(run func(service api.ServiceInterface, entries []ship_goapi.RemoteService)) *ServiceReaderInterface_VisibleRemoteServicesUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.ServiceInterface), args[1].([]ship_goapi.RemoteService))
	})
	return _c
}

func (_c *ServiceReaderInterface_VisibleRemoteServicesUpdated_Call) Return() *ServiceReaderInterface_VisibleRemoteServicesUpdated_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceReaderInterface_VisibleRemoteServicesUpdated_Call) RunAndReturn(run func(api.ServiceInterface, []ship_goapi.RemoteService)) *ServiceReaderInterface_VisibleRemoteServicesUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceReaderInterface creates a new instance of ServiceReaderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceReaderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceReaderInterface {
	mock := &ServiceReaderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
