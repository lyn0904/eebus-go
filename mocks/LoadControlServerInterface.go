// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	api "github.com/lyn0904/eebus-go/api"
	mock "github.com/stretchr/testify/mock"

	model "github.com/lyn0904/spine-go/model"
)

// LoadControlServerInterface is an autogenerated mock type for the LoadControlServerInterface type
type LoadControlServerInterface struct {
	mock.Mock
}

type LoadControlServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *LoadControlServerInterface) EXPECT() *LoadControlServerInterface_Expecter {
	return &LoadControlServerInterface_Expecter{mock: &_m.Mock}
}

// AddLimitDescription provides a mock function with given fields: description
func (_m *LoadControlServerInterface) AddLimitDescription(description model.LoadControlLimitDescriptionDataType) *model.LoadControlLimitIdType {
	ret := _m.Called(description)

	if len(ret) == 0 {
		panic("no return value specified for AddLimitDescription")
	}

	var r0 *model.LoadControlLimitIdType
	if rf, ok := ret.Get(0).(func(model.LoadControlLimitDescriptionDataType) *model.LoadControlLimitIdType); ok {
		r0 = rf(description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LoadControlLimitIdType)
		}
	}

	return r0
}

// LoadControlServerInterface_AddLimitDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLimitDescription'
type LoadControlServerInterface_AddLimitDescription_Call struct {
	*mock.Call
}

// AddLimitDescription is a helper method to define mock.On call
//   - description model.LoadControlLimitDescriptionDataType
func (_e *LoadControlServerInterface_Expecter) AddLimitDescription(description interface{}) *LoadControlServerInterface_AddLimitDescription_Call {
	return &LoadControlServerInterface_AddLimitDescription_Call{Call: _e.mock.On("AddLimitDescription", description)}
}

func (_c *LoadControlServerInterface_AddLimitDescription_Call) Run(run func(description model.LoadControlLimitDescriptionDataType)) *LoadControlServerInterface_AddLimitDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.LoadControlLimitDescriptionDataType))
	})
	return _c
}

func (_c *LoadControlServerInterface_AddLimitDescription_Call) Return(_a0 *model.LoadControlLimitIdType) *LoadControlServerInterface_AddLimitDescription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoadControlServerInterface_AddLimitDescription_Call) RunAndReturn(run func(model.LoadControlLimitDescriptionDataType) *model.LoadControlLimitIdType) *LoadControlServerInterface_AddLimitDescription_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLimitDataForFilter provides a mock function with given fields: data, deleteSelector, deleteElements
func (_m *LoadControlServerInterface) UpdateLimitDataForFilter(data []api.LoadControlLimitDataForFilter, deleteSelector *model.LoadControlLimitListDataSelectorsType, deleteElements *model.LoadControlLimitDataElementsType) error {
	ret := _m.Called(data, deleteSelector, deleteElements)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLimitDataForFilter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]api.LoadControlLimitDataForFilter, *model.LoadControlLimitListDataSelectorsType, *model.LoadControlLimitDataElementsType) error); ok {
		r0 = rf(data, deleteSelector, deleteElements)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadControlServerInterface_UpdateLimitDataForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLimitDataForFilter'
type LoadControlServerInterface_UpdateLimitDataForFilter_Call struct {
	*mock.Call
}

// UpdateLimitDataForFilter is a helper method to define mock.On call
//   - data []api.LoadControlLimitDataForFilter
//   - deleteSelector *model.LoadControlLimitListDataSelectorsType
//   - deleteElements *model.LoadControlLimitDataElementsType
func (_e *LoadControlServerInterface_Expecter) UpdateLimitDataForFilter(data interface{}, deleteSelector interface{}, deleteElements interface{}) *LoadControlServerInterface_UpdateLimitDataForFilter_Call {
	return &LoadControlServerInterface_UpdateLimitDataForFilter_Call{Call: _e.mock.On("UpdateLimitDataForFilter", data, deleteSelector, deleteElements)}
}

func (_c *LoadControlServerInterface_UpdateLimitDataForFilter_Call) Run(run func(data []api.LoadControlLimitDataForFilter, deleteSelector *model.LoadControlLimitListDataSelectorsType, deleteElements *model.LoadControlLimitDataElementsType)) *LoadControlServerInterface_UpdateLimitDataForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]api.LoadControlLimitDataForFilter), args[1].(*model.LoadControlLimitListDataSelectorsType), args[2].(*model.LoadControlLimitDataElementsType))
	})
	return _c
}

func (_c *LoadControlServerInterface_UpdateLimitDataForFilter_Call) Return(_a0 error) *LoadControlServerInterface_UpdateLimitDataForFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoadControlServerInterface_UpdateLimitDataForFilter_Call) RunAndReturn(run func([]api.LoadControlLimitDataForFilter, *model.LoadControlLimitListDataSelectorsType, *model.LoadControlLimitDataElementsType) error) *LoadControlServerInterface_UpdateLimitDataForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLimitDataForIds provides a mock function with given fields: data
func (_m *LoadControlServerInterface) UpdateLimitDataForIds(data []api.LoadControlLimitDataForID) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLimitDataForIds")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]api.LoadControlLimitDataForID) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadControlServerInterface_UpdateLimitDataForIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLimitDataForIds'
type LoadControlServerInterface_UpdateLimitDataForIds_Call struct {
	*mock.Call
}

// UpdateLimitDataForIds is a helper method to define mock.On call
//   - data []api.LoadControlLimitDataForID
func (_e *LoadControlServerInterface_Expecter) UpdateLimitDataForIds(data interface{}) *LoadControlServerInterface_UpdateLimitDataForIds_Call {
	return &LoadControlServerInterface_UpdateLimitDataForIds_Call{Call: _e.mock.On("UpdateLimitDataForIds", data)}
}

func (_c *LoadControlServerInterface_UpdateLimitDataForIds_Call) Run(run func(data []api.LoadControlLimitDataForID)) *LoadControlServerInterface_UpdateLimitDataForIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]api.LoadControlLimitDataForID))
	})
	return _c
}

func (_c *LoadControlServerInterface_UpdateLimitDataForIds_Call) Return(_a0 error) *LoadControlServerInterface_UpdateLimitDataForIds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoadControlServerInterface_UpdateLimitDataForIds_Call) RunAndReturn(run func([]api.LoadControlLimitDataForID) error) *LoadControlServerInterface_UpdateLimitDataForIds_Call {
	_c.Call.Return(run)
	return _c
}

// NewLoadControlServerInterface creates a new instance of LoadControlServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoadControlServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoadControlServerInterface {
	mock := &LoadControlServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
