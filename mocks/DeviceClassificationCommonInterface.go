// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "github.com/lyn0904/spine-go/model"
	mock "github.com/stretchr/testify/mock"
)

// DeviceClassificationCommonInterface is an autogenerated mock type for the DeviceClassificationCommonInterface type
type DeviceClassificationCommonInterface struct {
	mock.Mock
}

type DeviceClassificationCommonInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *DeviceClassificationCommonInterface) EXPECT() *DeviceClassificationCommonInterface_Expecter {
	return &DeviceClassificationCommonInterface_Expecter{mock: &_m.Mock}
}

// GetManufacturerDetails provides a mock function with given fields:
func (_m *DeviceClassificationCommonInterface) GetManufacturerDetails() (*model.DeviceClassificationManufacturerDataType, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetManufacturerDetails")
	}

	var r0 *model.DeviceClassificationManufacturerDataType
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.DeviceClassificationManufacturerDataType, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.DeviceClassificationManufacturerDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeviceClassificationManufacturerDataType)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceClassificationCommonInterface_GetManufacturerDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManufacturerDetails'
type DeviceClassificationCommonInterface_GetManufacturerDetails_Call struct {
	*mock.Call
}

// GetManufacturerDetails is a helper method to define mock.On call
func (_e *DeviceClassificationCommonInterface_Expecter) GetManufacturerDetails() *DeviceClassificationCommonInterface_GetManufacturerDetails_Call {
	return &DeviceClassificationCommonInterface_GetManufacturerDetails_Call{Call: _e.mock.On("GetManufacturerDetails")}
}

func (_c *DeviceClassificationCommonInterface_GetManufacturerDetails_Call) Run(run func()) *DeviceClassificationCommonInterface_GetManufacturerDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceClassificationCommonInterface_GetManufacturerDetails_Call) Return(_a0 *model.DeviceClassificationManufacturerDataType, _a1 error) *DeviceClassificationCommonInterface_GetManufacturerDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeviceClassificationCommonInterface_GetManufacturerDetails_Call) RunAndReturn(run func() (*model.DeviceClassificationManufacturerDataType, error)) *DeviceClassificationCommonInterface_GetManufacturerDetails_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeviceClassificationCommonInterface creates a new instance of DeviceClassificationCommonInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceClassificationCommonInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceClassificationCommonInterface {
	mock := &DeviceClassificationCommonInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
