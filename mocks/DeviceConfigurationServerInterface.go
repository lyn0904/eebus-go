// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "github.com/lyn0904/spine-go/model"
	mock "github.com/stretchr/testify/mock"
)

// DeviceConfigurationServerInterface is an autogenerated mock type for the DeviceConfigurationServerInterface type
type DeviceConfigurationServerInterface struct {
	mock.Mock
}

type DeviceConfigurationServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *DeviceConfigurationServerInterface) EXPECT() *DeviceConfigurationServerInterface_Expecter {
	return &DeviceConfigurationServerInterface_Expecter{mock: &_m.Mock}
}

// AddKeyValueDescription provides a mock function with given fields: description
func (_m *DeviceConfigurationServerInterface) AddKeyValueDescription(description model.DeviceConfigurationKeyValueDescriptionDataType) *model.DeviceConfigurationKeyIdType {
	ret := _m.Called(description)

	if len(ret) == 0 {
		panic("no return value specified for AddKeyValueDescription")
	}

	var r0 *model.DeviceConfigurationKeyIdType
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyValueDescriptionDataType) *model.DeviceConfigurationKeyIdType); ok {
		r0 = rf(description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeviceConfigurationKeyIdType)
		}
	}

	return r0
}

// DeviceConfigurationServerInterface_AddKeyValueDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddKeyValueDescription'
type DeviceConfigurationServerInterface_AddKeyValueDescription_Call struct {
	*mock.Call
}

// AddKeyValueDescription is a helper method to define mock.On call
//   - description model.DeviceConfigurationKeyValueDescriptionDataType
func (_e *DeviceConfigurationServerInterface_Expecter) AddKeyValueDescription(description interface{}) *DeviceConfigurationServerInterface_AddKeyValueDescription_Call {
	return &DeviceConfigurationServerInterface_AddKeyValueDescription_Call{Call: _e.mock.On("AddKeyValueDescription", description)}
}

func (_c *DeviceConfigurationServerInterface_AddKeyValueDescription_Call) Run(run func(description model.DeviceConfigurationKeyValueDescriptionDataType)) *DeviceConfigurationServerInterface_AddKeyValueDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.DeviceConfigurationKeyValueDescriptionDataType))
	})
	return _c
}

func (_c *DeviceConfigurationServerInterface_AddKeyValueDescription_Call) Return(_a0 *model.DeviceConfigurationKeyIdType) *DeviceConfigurationServerInterface_AddKeyValueDescription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceConfigurationServerInterface_AddKeyValueDescription_Call) RunAndReturn(run func(model.DeviceConfigurationKeyValueDescriptionDataType) *model.DeviceConfigurationKeyIdType) *DeviceConfigurationServerInterface_AddKeyValueDescription_Call {
	_c.Call.Return(run)
	return _c
}

// CheckEventPayloadDataForFilter provides a mock function with given fields: payloadData, filter
func (_m *DeviceConfigurationServerInterface) CheckEventPayloadDataForFilter(payloadData interface{}, filter interface{}) bool {
	ret := _m.Called(payloadData, filter)

	if len(ret) == 0 {
		panic("no return value specified for CheckEventPayloadDataForFilter")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) bool); ok {
		r0 = rf(payloadData, filter)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeviceConfigurationServerInterface_CheckEventPayloadDataForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckEventPayloadDataForFilter'
type DeviceConfigurationServerInterface_CheckEventPayloadDataForFilter_Call struct {
	*mock.Call
}

// CheckEventPayloadDataForFilter is a helper method to define mock.On call
//   - payloadData interface{}
//   - filter interface{}
func (_e *DeviceConfigurationServerInterface_Expecter) CheckEventPayloadDataForFilter(payloadData interface{}, filter interface{}) *DeviceConfigurationServerInterface_CheckEventPayloadDataForFilter_Call {
	return &DeviceConfigurationServerInterface_CheckEventPayloadDataForFilter_Call{Call: _e.mock.On("CheckEventPayloadDataForFilter", payloadData, filter)}
}

func (_c *DeviceConfigurationServerInterface_CheckEventPayloadDataForFilter_Call) Run(run func(payloadData interface{}, filter interface{})) *DeviceConfigurationServerInterface_CheckEventPayloadDataForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *DeviceConfigurationServerInterface_CheckEventPayloadDataForFilter_Call) Return(_a0 bool) *DeviceConfigurationServerInterface_CheckEventPayloadDataForFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceConfigurationServerInterface_CheckEventPayloadDataForFilter_Call) RunAndReturn(run func(interface{}, interface{}) bool) *DeviceConfigurationServerInterface_CheckEventPayloadDataForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeyValueDataForFilter provides a mock function with given fields: filter
func (_m *DeviceConfigurationServerInterface) GetKeyValueDataForFilter(filter model.DeviceConfigurationKeyValueDescriptionDataType) (*model.DeviceConfigurationKeyValueDataType, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyValueDataForFilter")
	}

	var r0 *model.DeviceConfigurationKeyValueDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyValueDescriptionDataType) (*model.DeviceConfigurationKeyValueDataType, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyValueDescriptionDataType) *model.DeviceConfigurationKeyValueDataType); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeviceConfigurationKeyValueDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.DeviceConfigurationKeyValueDescriptionDataType) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceConfigurationServerInterface_GetKeyValueDataForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeyValueDataForFilter'
type DeviceConfigurationServerInterface_GetKeyValueDataForFilter_Call struct {
	*mock.Call
}

// GetKeyValueDataForFilter is a helper method to define mock.On call
//   - filter model.DeviceConfigurationKeyValueDescriptionDataType
func (_e *DeviceConfigurationServerInterface_Expecter) GetKeyValueDataForFilter(filter interface{}) *DeviceConfigurationServerInterface_GetKeyValueDataForFilter_Call {
	return &DeviceConfigurationServerInterface_GetKeyValueDataForFilter_Call{Call: _e.mock.On("GetKeyValueDataForFilter", filter)}
}

func (_c *DeviceConfigurationServerInterface_GetKeyValueDataForFilter_Call) Run(run func(filter model.DeviceConfigurationKeyValueDescriptionDataType)) *DeviceConfigurationServerInterface_GetKeyValueDataForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.DeviceConfigurationKeyValueDescriptionDataType))
	})
	return _c
}

func (_c *DeviceConfigurationServerInterface_GetKeyValueDataForFilter_Call) Return(_a0 *model.DeviceConfigurationKeyValueDataType, _a1 error) *DeviceConfigurationServerInterface_GetKeyValueDataForFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeviceConfigurationServerInterface_GetKeyValueDataForFilter_Call) RunAndReturn(run func(model.DeviceConfigurationKeyValueDescriptionDataType) (*model.DeviceConfigurationKeyValueDataType, error)) *DeviceConfigurationServerInterface_GetKeyValueDataForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeyValueDataForKeyId provides a mock function with given fields: keyId
func (_m *DeviceConfigurationServerInterface) GetKeyValueDataForKeyId(keyId model.DeviceConfigurationKeyIdType) (*model.DeviceConfigurationKeyValueDataType, error) {
	ret := _m.Called(keyId)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyValueDataForKeyId")
	}

	var r0 *model.DeviceConfigurationKeyValueDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyIdType) (*model.DeviceConfigurationKeyValueDataType, error)); ok {
		return rf(keyId)
	}
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyIdType) *model.DeviceConfigurationKeyValueDataType); ok {
		r0 = rf(keyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeviceConfigurationKeyValueDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.DeviceConfigurationKeyIdType) error); ok {
		r1 = rf(keyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceConfigurationServerInterface_GetKeyValueDataForKeyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeyValueDataForKeyId'
type DeviceConfigurationServerInterface_GetKeyValueDataForKeyId_Call struct {
	*mock.Call
}

// GetKeyValueDataForKeyId is a helper method to define mock.On call
//   - keyId model.DeviceConfigurationKeyIdType
func (_e *DeviceConfigurationServerInterface_Expecter) GetKeyValueDataForKeyId(keyId interface{}) *DeviceConfigurationServerInterface_GetKeyValueDataForKeyId_Call {
	return &DeviceConfigurationServerInterface_GetKeyValueDataForKeyId_Call{Call: _e.mock.On("GetKeyValueDataForKeyId", keyId)}
}

func (_c *DeviceConfigurationServerInterface_GetKeyValueDataForKeyId_Call) Run(run func(keyId model.DeviceConfigurationKeyIdType)) *DeviceConfigurationServerInterface_GetKeyValueDataForKeyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.DeviceConfigurationKeyIdType))
	})
	return _c
}

func (_c *DeviceConfigurationServerInterface_GetKeyValueDataForKeyId_Call) Return(_a0 *model.DeviceConfigurationKeyValueDataType, _a1 error) *DeviceConfigurationServerInterface_GetKeyValueDataForKeyId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeviceConfigurationServerInterface_GetKeyValueDataForKeyId_Call) RunAndReturn(run func(model.DeviceConfigurationKeyIdType) (*model.DeviceConfigurationKeyValueDataType, error)) *DeviceConfigurationServerInterface_GetKeyValueDataForKeyId_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeyValueDescriptionFoKeyId provides a mock function with given fields: keyId
func (_m *DeviceConfigurationServerInterface) GetKeyValueDescriptionFoKeyId(keyId model.DeviceConfigurationKeyIdType) (*model.DeviceConfigurationKeyValueDescriptionDataType, error) {
	ret := _m.Called(keyId)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyValueDescriptionFoKeyId")
	}

	var r0 *model.DeviceConfigurationKeyValueDescriptionDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyIdType) (*model.DeviceConfigurationKeyValueDescriptionDataType, error)); ok {
		return rf(keyId)
	}
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyIdType) *model.DeviceConfigurationKeyValueDescriptionDataType); ok {
		r0 = rf(keyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeviceConfigurationKeyValueDescriptionDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.DeviceConfigurationKeyIdType) error); ok {
		r1 = rf(keyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceConfigurationServerInterface_GetKeyValueDescriptionFoKeyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeyValueDescriptionFoKeyId'
type DeviceConfigurationServerInterface_GetKeyValueDescriptionFoKeyId_Call struct {
	*mock.Call
}

// GetKeyValueDescriptionFoKeyId is a helper method to define mock.On call
//   - keyId model.DeviceConfigurationKeyIdType
func (_e *DeviceConfigurationServerInterface_Expecter) GetKeyValueDescriptionFoKeyId(keyId interface{}) *DeviceConfigurationServerInterface_GetKeyValueDescriptionFoKeyId_Call {
	return &DeviceConfigurationServerInterface_GetKeyValueDescriptionFoKeyId_Call{Call: _e.mock.On("GetKeyValueDescriptionFoKeyId", keyId)}
}

func (_c *DeviceConfigurationServerInterface_GetKeyValueDescriptionFoKeyId_Call) Run(run func(keyId model.DeviceConfigurationKeyIdType)) *DeviceConfigurationServerInterface_GetKeyValueDescriptionFoKeyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.DeviceConfigurationKeyIdType))
	})
	return _c
}

func (_c *DeviceConfigurationServerInterface_GetKeyValueDescriptionFoKeyId_Call) Return(_a0 *model.DeviceConfigurationKeyValueDescriptionDataType, _a1 error) *DeviceConfigurationServerInterface_GetKeyValueDescriptionFoKeyId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeviceConfigurationServerInterface_GetKeyValueDescriptionFoKeyId_Call) RunAndReturn(run func(model.DeviceConfigurationKeyIdType) (*model.DeviceConfigurationKeyValueDescriptionDataType, error)) *DeviceConfigurationServerInterface_GetKeyValueDescriptionFoKeyId_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeyValueDescriptionsForFilter provides a mock function with given fields: filter
func (_m *DeviceConfigurationServerInterface) GetKeyValueDescriptionsForFilter(filter model.DeviceConfigurationKeyValueDescriptionDataType) ([]model.DeviceConfigurationKeyValueDescriptionDataType, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyValueDescriptionsForFilter")
	}

	var r0 []model.DeviceConfigurationKeyValueDescriptionDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyValueDescriptionDataType) ([]model.DeviceConfigurationKeyValueDescriptionDataType, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyValueDescriptionDataType) []model.DeviceConfigurationKeyValueDescriptionDataType); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.DeviceConfigurationKeyValueDescriptionDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.DeviceConfigurationKeyValueDescriptionDataType) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceConfigurationServerInterface_GetKeyValueDescriptionsForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeyValueDescriptionsForFilter'
type DeviceConfigurationServerInterface_GetKeyValueDescriptionsForFilter_Call struct {
	*mock.Call
}

// GetKeyValueDescriptionsForFilter is a helper method to define mock.On call
//   - filter model.DeviceConfigurationKeyValueDescriptionDataType
func (_e *DeviceConfigurationServerInterface_Expecter) GetKeyValueDescriptionsForFilter(filter interface{}) *DeviceConfigurationServerInterface_GetKeyValueDescriptionsForFilter_Call {
	return &DeviceConfigurationServerInterface_GetKeyValueDescriptionsForFilter_Call{Call: _e.mock.On("GetKeyValueDescriptionsForFilter", filter)}
}

func (_c *DeviceConfigurationServerInterface_GetKeyValueDescriptionsForFilter_Call) Run(run func(filter model.DeviceConfigurationKeyValueDescriptionDataType)) *DeviceConfigurationServerInterface_GetKeyValueDescriptionsForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.DeviceConfigurationKeyValueDescriptionDataType))
	})
	return _c
}

func (_c *DeviceConfigurationServerInterface_GetKeyValueDescriptionsForFilter_Call) Return(_a0 []model.DeviceConfigurationKeyValueDescriptionDataType, _a1 error) *DeviceConfigurationServerInterface_GetKeyValueDescriptionsForFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeviceConfigurationServerInterface_GetKeyValueDescriptionsForFilter_Call) RunAndReturn(run func(model.DeviceConfigurationKeyValueDescriptionDataType) ([]model.DeviceConfigurationKeyValueDescriptionDataType, error)) *DeviceConfigurationServerInterface_GetKeyValueDescriptionsForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateKeyValueDataForFilter provides a mock function with given fields: data, deleteElements, filter
func (_m *DeviceConfigurationServerInterface) UpdateKeyValueDataForFilter(data model.DeviceConfigurationKeyValueDataType, deleteElements *model.DeviceConfigurationKeyValueDataElementsType, filter model.DeviceConfigurationKeyValueDescriptionDataType) error {
	ret := _m.Called(data, deleteElements, filter)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKeyValueDataForFilter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyValueDataType, *model.DeviceConfigurationKeyValueDataElementsType, model.DeviceConfigurationKeyValueDescriptionDataType) error); ok {
		r0 = rf(data, deleteElements, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceConfigurationServerInterface_UpdateKeyValueDataForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateKeyValueDataForFilter'
type DeviceConfigurationServerInterface_UpdateKeyValueDataForFilter_Call struct {
	*mock.Call
}

// UpdateKeyValueDataForFilter is a helper method to define mock.On call
//   - data model.DeviceConfigurationKeyValueDataType
//   - deleteElements *model.DeviceConfigurationKeyValueDataElementsType
//   - filter model.DeviceConfigurationKeyValueDescriptionDataType
func (_e *DeviceConfigurationServerInterface_Expecter) UpdateKeyValueDataForFilter(data interface{}, deleteElements interface{}, filter interface{}) *DeviceConfigurationServerInterface_UpdateKeyValueDataForFilter_Call {
	return &DeviceConfigurationServerInterface_UpdateKeyValueDataForFilter_Call{Call: _e.mock.On("UpdateKeyValueDataForFilter", data, deleteElements, filter)}
}

func (_c *DeviceConfigurationServerInterface_UpdateKeyValueDataForFilter_Call) Run(run func(data model.DeviceConfigurationKeyValueDataType, deleteElements *model.DeviceConfigurationKeyValueDataElementsType, filter model.DeviceConfigurationKeyValueDescriptionDataType)) *DeviceConfigurationServerInterface_UpdateKeyValueDataForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.DeviceConfigurationKeyValueDataType), args[1].(*model.DeviceConfigurationKeyValueDataElementsType), args[2].(model.DeviceConfigurationKeyValueDescriptionDataType))
	})
	return _c
}

func (_c *DeviceConfigurationServerInterface_UpdateKeyValueDataForFilter_Call) Return(_a0 error) *DeviceConfigurationServerInterface_UpdateKeyValueDataForFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceConfigurationServerInterface_UpdateKeyValueDataForFilter_Call) RunAndReturn(run func(model.DeviceConfigurationKeyValueDataType, *model.DeviceConfigurationKeyValueDataElementsType, model.DeviceConfigurationKeyValueDescriptionDataType) error) *DeviceConfigurationServerInterface_UpdateKeyValueDataForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateKeyValueDataForKeyId provides a mock function with given fields: data, deleteElements, keyId
func (_m *DeviceConfigurationServerInterface) UpdateKeyValueDataForKeyId(data model.DeviceConfigurationKeyValueDataType, deleteElements *model.DeviceConfigurationKeyValueDataElementsType, keyId model.DeviceConfigurationKeyIdType) error {
	ret := _m.Called(data, deleteElements, keyId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKeyValueDataForKeyId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.DeviceConfigurationKeyValueDataType, *model.DeviceConfigurationKeyValueDataElementsType, model.DeviceConfigurationKeyIdType) error); ok {
		r0 = rf(data, deleteElements, keyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceConfigurationServerInterface_UpdateKeyValueDataForKeyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateKeyValueDataForKeyId'
type DeviceConfigurationServerInterface_UpdateKeyValueDataForKeyId_Call struct {
	*mock.Call
}

// UpdateKeyValueDataForKeyId is a helper method to define mock.On call
//   - data model.DeviceConfigurationKeyValueDataType
//   - deleteElements *model.DeviceConfigurationKeyValueDataElementsType
//   - keyId model.DeviceConfigurationKeyIdType
func (_e *DeviceConfigurationServerInterface_Expecter) UpdateKeyValueDataForKeyId(data interface{}, deleteElements interface{}, keyId interface{}) *DeviceConfigurationServerInterface_UpdateKeyValueDataForKeyId_Call {
	return &DeviceConfigurationServerInterface_UpdateKeyValueDataForKeyId_Call{Call: _e.mock.On("UpdateKeyValueDataForKeyId", data, deleteElements, keyId)}
}

func (_c *DeviceConfigurationServerInterface_UpdateKeyValueDataForKeyId_Call) Run(run func(data model.DeviceConfigurationKeyValueDataType, deleteElements *model.DeviceConfigurationKeyValueDataElementsType, keyId model.DeviceConfigurationKeyIdType)) *DeviceConfigurationServerInterface_UpdateKeyValueDataForKeyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.DeviceConfigurationKeyValueDataType), args[1].(*model.DeviceConfigurationKeyValueDataElementsType), args[2].(model.DeviceConfigurationKeyIdType))
	})
	return _c
}

func (_c *DeviceConfigurationServerInterface_UpdateKeyValueDataForKeyId_Call) Return(_a0 error) *DeviceConfigurationServerInterface_UpdateKeyValueDataForKeyId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceConfigurationServerInterface_UpdateKeyValueDataForKeyId_Call) RunAndReturn(run func(model.DeviceConfigurationKeyValueDataType, *model.DeviceConfigurationKeyValueDataElementsType, model.DeviceConfigurationKeyIdType) error) *DeviceConfigurationServerInterface_UpdateKeyValueDataForKeyId_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeviceConfigurationServerInterface creates a new instance of DeviceConfigurationServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceConfigurationServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceConfigurationServerInterface {
	mock := &DeviceConfigurationServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
