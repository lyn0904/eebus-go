// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/eebus-go/api"
	mock "github.com/stretchr/testify/mock"

	model "github.com/lyn0904/spine-go/model"
)

// ElectricalConnectionServerInterface is an autogenerated mock type for the ElectricalConnectionServerInterface type
type ElectricalConnectionServerInterface struct {
	mock.Mock
}

type ElectricalConnectionServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ElectricalConnectionServerInterface) EXPECT() *ElectricalConnectionServerInterface_Expecter {
	return &ElectricalConnectionServerInterface_Expecter{mock: &_m.Mock}
}

// AddCharacteristic provides a mock function with given fields: data
func (_m *ElectricalConnectionServerInterface) AddCharacteristic(data model.ElectricalConnectionCharacteristicDataType) (*model.ElectricalConnectionCharacteristicIdType, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for AddCharacteristic")
	}

	var r0 *model.ElectricalConnectionCharacteristicIdType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionCharacteristicDataType) (*model.ElectricalConnectionCharacteristicIdType, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionCharacteristicDataType) *model.ElectricalConnectionCharacteristicIdType); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ElectricalConnectionCharacteristicIdType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ElectricalConnectionCharacteristicDataType) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElectricalConnectionServerInterface_AddCharacteristic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCharacteristic'
type ElectricalConnectionServerInterface_AddCharacteristic_Call struct {
	*mock.Call
}

// AddCharacteristic is a helper method to define mock.On call
//   - data model.ElectricalConnectionCharacteristicDataType
func (_e *ElectricalConnectionServerInterface_Expecter) AddCharacteristic(data interface{}) *ElectricalConnectionServerInterface_AddCharacteristic_Call {
	return &ElectricalConnectionServerInterface_AddCharacteristic_Call{Call: _e.mock.On("AddCharacteristic", data)}
}

func (_c *ElectricalConnectionServerInterface_AddCharacteristic_Call) Run(run func(data model.ElectricalConnectionCharacteristicDataType)) *ElectricalConnectionServerInterface_AddCharacteristic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionCharacteristicDataType))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_AddCharacteristic_Call) Return(_a0 *model.ElectricalConnectionCharacteristicIdType, _a1 error) *ElectricalConnectionServerInterface_AddCharacteristic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ElectricalConnectionServerInterface_AddCharacteristic_Call) RunAndReturn(run func(model.ElectricalConnectionCharacteristicDataType) (*model.ElectricalConnectionCharacteristicIdType, error)) *ElectricalConnectionServerInterface_AddCharacteristic_Call {
	_c.Call.Return(run)
	return _c
}

// AddDescription provides a mock function with given fields: description
func (_m *ElectricalConnectionServerInterface) AddDescription(description model.ElectricalConnectionDescriptionDataType) error {
	ret := _m.Called(description)

	if len(ret) == 0 {
		panic("no return value specified for AddDescription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionDescriptionDataType) error); ok {
		r0 = rf(description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ElectricalConnectionServerInterface_AddDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDescription'
type ElectricalConnectionServerInterface_AddDescription_Call struct {
	*mock.Call
}

// AddDescription is a helper method to define mock.On call
//   - description model.ElectricalConnectionDescriptionDataType
func (_e *ElectricalConnectionServerInterface_Expecter) AddDescription(description interface{}) *ElectricalConnectionServerInterface_AddDescription_Call {
	return &ElectricalConnectionServerInterface_AddDescription_Call{Call: _e.mock.On("AddDescription", description)}
}

func (_c *ElectricalConnectionServerInterface_AddDescription_Call) Run(run func(description model.ElectricalConnectionDescriptionDataType)) *ElectricalConnectionServerInterface_AddDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionDescriptionDataType))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_AddDescription_Call) Return(_a0 error) *ElectricalConnectionServerInterface_AddDescription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ElectricalConnectionServerInterface_AddDescription_Call) RunAndReturn(run func(model.ElectricalConnectionDescriptionDataType) error) *ElectricalConnectionServerInterface_AddDescription_Call {
	_c.Call.Return(run)
	return _c
}

// AddParameterDescription provides a mock function with given fields: description
func (_m *ElectricalConnectionServerInterface) AddParameterDescription(description model.ElectricalConnectionParameterDescriptionDataType) *model.ElectricalConnectionParameterIdType {
	ret := _m.Called(description)

	if len(ret) == 0 {
		panic("no return value specified for AddParameterDescription")
	}

	var r0 *model.ElectricalConnectionParameterIdType
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionParameterDescriptionDataType) *model.ElectricalConnectionParameterIdType); ok {
		r0 = rf(description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ElectricalConnectionParameterIdType)
		}
	}

	return r0
}

// ElectricalConnectionServerInterface_AddParameterDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddParameterDescription'
type ElectricalConnectionServerInterface_AddParameterDescription_Call struct {
	*mock.Call
}

// AddParameterDescription is a helper method to define mock.On call
//   - description model.ElectricalConnectionParameterDescriptionDataType
func (_e *ElectricalConnectionServerInterface_Expecter) AddParameterDescription(description interface{}) *ElectricalConnectionServerInterface_AddParameterDescription_Call {
	return &ElectricalConnectionServerInterface_AddParameterDescription_Call{Call: _e.mock.On("AddParameterDescription", description)}
}

func (_c *ElectricalConnectionServerInterface_AddParameterDescription_Call) Run(run func(description model.ElectricalConnectionParameterDescriptionDataType)) *ElectricalConnectionServerInterface_AddParameterDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionParameterDescriptionDataType))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_AddParameterDescription_Call) Return(_a0 *model.ElectricalConnectionParameterIdType) *ElectricalConnectionServerInterface_AddParameterDescription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ElectricalConnectionServerInterface_AddParameterDescription_Call) RunAndReturn(run func(model.ElectricalConnectionParameterDescriptionDataType) *model.ElectricalConnectionParameterIdType) *ElectricalConnectionServerInterface_AddParameterDescription_Call {
	_c.Call.Return(run)
	return _c
}

// AdjustValueToBeWithinPermittedValuesForParameterId provides a mock function with given fields: value, parameterId
func (_m *ElectricalConnectionServerInterface) AdjustValueToBeWithinPermittedValuesForParameterId(value float64, parameterId model.ElectricalConnectionParameterIdType) float64 {
	ret := _m.Called(value, parameterId)

	if len(ret) == 0 {
		panic("no return value specified for AdjustValueToBeWithinPermittedValuesForParameterId")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(float64, model.ElectricalConnectionParameterIdType) float64); ok {
		r0 = rf(value, parameterId)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// ElectricalConnectionServerInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdjustValueToBeWithinPermittedValuesForParameterId'
type ElectricalConnectionServerInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call struct {
	*mock.Call
}

// AdjustValueToBeWithinPermittedValuesForParameterId is a helper method to define mock.On call
//   - value float64
//   - parameterId model.ElectricalConnectionParameterIdType
func (_e *ElectricalConnectionServerInterface_Expecter) AdjustValueToBeWithinPermittedValuesForParameterId(value interface{}, parameterId interface{}) *ElectricalConnectionServerInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call {
	return &ElectricalConnectionServerInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call{Call: _e.mock.On("AdjustValueToBeWithinPermittedValuesForParameterId", value, parameterId)}
}

func (_c *ElectricalConnectionServerInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call) Run(run func(value float64, parameterId model.ElectricalConnectionParameterIdType)) *ElectricalConnectionServerInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(model.ElectricalConnectionParameterIdType))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call) Return(_a0 float64) *ElectricalConnectionServerInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ElectricalConnectionServerInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call) RunAndReturn(run func(float64, model.ElectricalConnectionParameterIdType) float64) *ElectricalConnectionServerInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call {
	_c.Call.Return(run)
	return _c
}

// CheckEventPayloadDataForFilter provides a mock function with given fields: payloadData, filter
func (_m *ElectricalConnectionServerInterface) CheckEventPayloadDataForFilter(payloadData interface{}, filter interface{}) bool {
	ret := _m.Called(payloadData, filter)

	if len(ret) == 0 {
		panic("no return value specified for CheckEventPayloadDataForFilter")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) bool); ok {
		r0 = rf(payloadData, filter)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ElectricalConnectionServerInterface_CheckEventPayloadDataForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckEventPayloadDataForFilter'
type ElectricalConnectionServerInterface_CheckEventPayloadDataForFilter_Call struct {
	*mock.Call
}

// CheckEventPayloadDataForFilter is a helper method to define mock.On call
//   - payloadData interface{}
//   - filter interface{}
func (_e *ElectricalConnectionServerInterface_Expecter) CheckEventPayloadDataForFilter(payloadData interface{}, filter interface{}) *ElectricalConnectionServerInterface_CheckEventPayloadDataForFilter_Call {
	return &ElectricalConnectionServerInterface_CheckEventPayloadDataForFilter_Call{Call: _e.mock.On("CheckEventPayloadDataForFilter", payloadData, filter)}
}

func (_c *ElectricalConnectionServerInterface_CheckEventPayloadDataForFilter_Call) Run(run func(payloadData interface{}, filter interface{})) *ElectricalConnectionServerInterface_CheckEventPayloadDataForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_CheckEventPayloadDataForFilter_Call) Return(_a0 bool) *ElectricalConnectionServerInterface_CheckEventPayloadDataForFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ElectricalConnectionServerInterface_CheckEventPayloadDataForFilter_Call) RunAndReturn(run func(interface{}, interface{}) bool) *ElectricalConnectionServerInterface_CheckEventPayloadDataForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetCharacteristicsForFilter provides a mock function with given fields: filter
func (_m *ElectricalConnectionServerInterface) GetCharacteristicsForFilter(filter model.ElectricalConnectionCharacteristicDataType) ([]model.ElectricalConnectionCharacteristicDataType, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetCharacteristicsForFilter")
	}

	var r0 []model.ElectricalConnectionCharacteristicDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionCharacteristicDataType) ([]model.ElectricalConnectionCharacteristicDataType, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionCharacteristicDataType) []model.ElectricalConnectionCharacteristicDataType); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ElectricalConnectionCharacteristicDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ElectricalConnectionCharacteristicDataType) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElectricalConnectionServerInterface_GetCharacteristicsForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCharacteristicsForFilter'
type ElectricalConnectionServerInterface_GetCharacteristicsForFilter_Call struct {
	*mock.Call
}

// GetCharacteristicsForFilter is a helper method to define mock.On call
//   - filter model.ElectricalConnectionCharacteristicDataType
func (_e *ElectricalConnectionServerInterface_Expecter) GetCharacteristicsForFilter(filter interface{}) *ElectricalConnectionServerInterface_GetCharacteristicsForFilter_Call {
	return &ElectricalConnectionServerInterface_GetCharacteristicsForFilter_Call{Call: _e.mock.On("GetCharacteristicsForFilter", filter)}
}

func (_c *ElectricalConnectionServerInterface_GetCharacteristicsForFilter_Call) Run(run func(filter model.ElectricalConnectionCharacteristicDataType)) *ElectricalConnectionServerInterface_GetCharacteristicsForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionCharacteristicDataType))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_GetCharacteristicsForFilter_Call) Return(_a0 []model.ElectricalConnectionCharacteristicDataType, _a1 error) *ElectricalConnectionServerInterface_GetCharacteristicsForFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ElectricalConnectionServerInterface_GetCharacteristicsForFilter_Call) RunAndReturn(run func(model.ElectricalConnectionCharacteristicDataType) ([]model.ElectricalConnectionCharacteristicDataType, error)) *ElectricalConnectionServerInterface_GetCharacteristicsForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetDescriptionForParameterDescriptionFilter provides a mock function with given fields: filter
func (_m *ElectricalConnectionServerInterface) GetDescriptionForParameterDescriptionFilter(filter model.ElectricalConnectionParameterDescriptionDataType) (*model.ElectricalConnectionDescriptionDataType, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetDescriptionForParameterDescriptionFilter")
	}

	var r0 *model.ElectricalConnectionDescriptionDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionParameterDescriptionDataType) (*model.ElectricalConnectionDescriptionDataType, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionParameterDescriptionDataType) *model.ElectricalConnectionDescriptionDataType); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ElectricalConnectionDescriptionDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ElectricalConnectionParameterDescriptionDataType) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElectricalConnectionServerInterface_GetDescriptionForParameterDescriptionFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDescriptionForParameterDescriptionFilter'
type ElectricalConnectionServerInterface_GetDescriptionForParameterDescriptionFilter_Call struct {
	*mock.Call
}

// GetDescriptionForParameterDescriptionFilter is a helper method to define mock.On call
//   - filter model.ElectricalConnectionParameterDescriptionDataType
func (_e *ElectricalConnectionServerInterface_Expecter) GetDescriptionForParameterDescriptionFilter(filter interface{}) *ElectricalConnectionServerInterface_GetDescriptionForParameterDescriptionFilter_Call {
	return &ElectricalConnectionServerInterface_GetDescriptionForParameterDescriptionFilter_Call{Call: _e.mock.On("GetDescriptionForParameterDescriptionFilter", filter)}
}

func (_c *ElectricalConnectionServerInterface_GetDescriptionForParameterDescriptionFilter_Call) Run(run func(filter model.ElectricalConnectionParameterDescriptionDataType)) *ElectricalConnectionServerInterface_GetDescriptionForParameterDescriptionFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionParameterDescriptionDataType))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_GetDescriptionForParameterDescriptionFilter_Call) Return(_a0 *model.ElectricalConnectionDescriptionDataType, _a1 error) *ElectricalConnectionServerInterface_GetDescriptionForParameterDescriptionFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ElectricalConnectionServerInterface_GetDescriptionForParameterDescriptionFilter_Call) RunAndReturn(run func(model.ElectricalConnectionParameterDescriptionDataType) (*model.ElectricalConnectionDescriptionDataType, error)) *ElectricalConnectionServerInterface_GetDescriptionForParameterDescriptionFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetDescriptionsForFilter provides a mock function with given fields: filter
func (_m *ElectricalConnectionServerInterface) GetDescriptionsForFilter(filter model.ElectricalConnectionDescriptionDataType) ([]model.ElectricalConnectionDescriptionDataType, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetDescriptionsForFilter")
	}

	var r0 []model.ElectricalConnectionDescriptionDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionDescriptionDataType) ([]model.ElectricalConnectionDescriptionDataType, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionDescriptionDataType) []model.ElectricalConnectionDescriptionDataType); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ElectricalConnectionDescriptionDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ElectricalConnectionDescriptionDataType) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElectricalConnectionServerInterface_GetDescriptionsForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDescriptionsForFilter'
type ElectricalConnectionServerInterface_GetDescriptionsForFilter_Call struct {
	*mock.Call
}

// GetDescriptionsForFilter is a helper method to define mock.On call
//   - filter model.ElectricalConnectionDescriptionDataType
func (_e *ElectricalConnectionServerInterface_Expecter) GetDescriptionsForFilter(filter interface{}) *ElectricalConnectionServerInterface_GetDescriptionsForFilter_Call {
	return &ElectricalConnectionServerInterface_GetDescriptionsForFilter_Call{Call: _e.mock.On("GetDescriptionsForFilter", filter)}
}

func (_c *ElectricalConnectionServerInterface_GetDescriptionsForFilter_Call) Run(run func(filter model.ElectricalConnectionDescriptionDataType)) *ElectricalConnectionServerInterface_GetDescriptionsForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionDescriptionDataType))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_GetDescriptionsForFilter_Call) Return(_a0 []model.ElectricalConnectionDescriptionDataType, _a1 error) *ElectricalConnectionServerInterface_GetDescriptionsForFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ElectricalConnectionServerInterface_GetDescriptionsForFilter_Call) RunAndReturn(run func(model.ElectricalConnectionDescriptionDataType) ([]model.ElectricalConnectionDescriptionDataType, error)) *ElectricalConnectionServerInterface_GetDescriptionsForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetParameterDescriptionsForFilter provides a mock function with given fields: filter
func (_m *ElectricalConnectionServerInterface) GetParameterDescriptionsForFilter(filter model.ElectricalConnectionParameterDescriptionDataType) ([]model.ElectricalConnectionParameterDescriptionDataType, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetParameterDescriptionsForFilter")
	}

	var r0 []model.ElectricalConnectionParameterDescriptionDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionParameterDescriptionDataType) ([]model.ElectricalConnectionParameterDescriptionDataType, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionParameterDescriptionDataType) []model.ElectricalConnectionParameterDescriptionDataType); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ElectricalConnectionParameterDescriptionDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ElectricalConnectionParameterDescriptionDataType) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElectricalConnectionServerInterface_GetParameterDescriptionsForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParameterDescriptionsForFilter'
type ElectricalConnectionServerInterface_GetParameterDescriptionsForFilter_Call struct {
	*mock.Call
}

// GetParameterDescriptionsForFilter is a helper method to define mock.On call
//   - filter model.ElectricalConnectionParameterDescriptionDataType
func (_e *ElectricalConnectionServerInterface_Expecter) GetParameterDescriptionsForFilter(filter interface{}) *ElectricalConnectionServerInterface_GetParameterDescriptionsForFilter_Call {
	return &ElectricalConnectionServerInterface_GetParameterDescriptionsForFilter_Call{Call: _e.mock.On("GetParameterDescriptionsForFilter", filter)}
}

func (_c *ElectricalConnectionServerInterface_GetParameterDescriptionsForFilter_Call) Run(run func(filter model.ElectricalConnectionParameterDescriptionDataType)) *ElectricalConnectionServerInterface_GetParameterDescriptionsForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionParameterDescriptionDataType))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_GetParameterDescriptionsForFilter_Call) Return(_a0 []model.ElectricalConnectionParameterDescriptionDataType, _a1 error) *ElectricalConnectionServerInterface_GetParameterDescriptionsForFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ElectricalConnectionServerInterface_GetParameterDescriptionsForFilter_Call) RunAndReturn(run func(model.ElectricalConnectionParameterDescriptionDataType) ([]model.ElectricalConnectionParameterDescriptionDataType, error)) *ElectricalConnectionServerInterface_GetParameterDescriptionsForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermittedValueDataForFilter provides a mock function with given fields: filter
func (_m *ElectricalConnectionServerInterface) GetPermittedValueDataForFilter(filter model.ElectricalConnectionPermittedValueSetDataType) (float64, float64, float64, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetPermittedValueDataForFilter")
	}

	var r0 float64
	var r1 float64
	var r2 float64
	var r3 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionPermittedValueSetDataType) (float64, float64, float64, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionPermittedValueSetDataType) float64); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(model.ElectricalConnectionPermittedValueSetDataType) float64); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(model.ElectricalConnectionPermittedValueSetDataType) float64); ok {
		r2 = rf(filter)
	} else {
		r2 = ret.Get(2).(float64)
	}

	if rf, ok := ret.Get(3).(func(model.ElectricalConnectionPermittedValueSetDataType) error); ok {
		r3 = rf(filter)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ElectricalConnectionServerInterface_GetPermittedValueDataForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermittedValueDataForFilter'
type ElectricalConnectionServerInterface_GetPermittedValueDataForFilter_Call struct {
	*mock.Call
}

// GetPermittedValueDataForFilter is a helper method to define mock.On call
//   - filter model.ElectricalConnectionPermittedValueSetDataType
func (_e *ElectricalConnectionServerInterface_Expecter) GetPermittedValueDataForFilter(filter interface{}) *ElectricalConnectionServerInterface_GetPermittedValueDataForFilter_Call {
	return &ElectricalConnectionServerInterface_GetPermittedValueDataForFilter_Call{Call: _e.mock.On("GetPermittedValueDataForFilter", filter)}
}

func (_c *ElectricalConnectionServerInterface_GetPermittedValueDataForFilter_Call) Run(run func(filter model.ElectricalConnectionPermittedValueSetDataType)) *ElectricalConnectionServerInterface_GetPermittedValueDataForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionPermittedValueSetDataType))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_GetPermittedValueDataForFilter_Call) Return(_a0 float64, _a1 float64, _a2 float64, _a3 error) *ElectricalConnectionServerInterface_GetPermittedValueDataForFilter_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *ElectricalConnectionServerInterface_GetPermittedValueDataForFilter_Call) RunAndReturn(run func(model.ElectricalConnectionPermittedValueSetDataType) (float64, float64, float64, error)) *ElectricalConnectionServerInterface_GetPermittedValueDataForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermittedValueSetForFilter provides a mock function with given fields: filter
func (_m *ElectricalConnectionServerInterface) GetPermittedValueSetForFilter(filter model.ElectricalConnectionPermittedValueSetDataType) ([]model.ElectricalConnectionPermittedValueSetDataType, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetPermittedValueSetForFilter")
	}

	var r0 []model.ElectricalConnectionPermittedValueSetDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionPermittedValueSetDataType) ([]model.ElectricalConnectionPermittedValueSetDataType, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionPermittedValueSetDataType) []model.ElectricalConnectionPermittedValueSetDataType); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ElectricalConnectionPermittedValueSetDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ElectricalConnectionPermittedValueSetDataType) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElectricalConnectionServerInterface_GetPermittedValueSetForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermittedValueSetForFilter'
type ElectricalConnectionServerInterface_GetPermittedValueSetForFilter_Call struct {
	*mock.Call
}

// GetPermittedValueSetForFilter is a helper method to define mock.On call
//   - filter model.ElectricalConnectionPermittedValueSetDataType
func (_e *ElectricalConnectionServerInterface_Expecter) GetPermittedValueSetForFilter(filter interface{}) *ElectricalConnectionServerInterface_GetPermittedValueSetForFilter_Call {
	return &ElectricalConnectionServerInterface_GetPermittedValueSetForFilter_Call{Call: _e.mock.On("GetPermittedValueSetForFilter", filter)}
}

func (_c *ElectricalConnectionServerInterface_GetPermittedValueSetForFilter_Call) Run(run func(filter model.ElectricalConnectionPermittedValueSetDataType)) *ElectricalConnectionServerInterface_GetPermittedValueSetForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionPermittedValueSetDataType))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_GetPermittedValueSetForFilter_Call) Return(_a0 []model.ElectricalConnectionPermittedValueSetDataType, _a1 error) *ElectricalConnectionServerInterface_GetPermittedValueSetForFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ElectricalConnectionServerInterface_GetPermittedValueSetForFilter_Call) RunAndReturn(run func(model.ElectricalConnectionPermittedValueSetDataType) ([]model.ElectricalConnectionPermittedValueSetDataType, error)) *ElectricalConnectionServerInterface_GetPermittedValueSetForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetPhaseCurrentLimits provides a mock function with given fields: measDesc
func (_m *ElectricalConnectionServerInterface) GetPhaseCurrentLimits(measDesc []model.MeasurementDescriptionDataType) ([]float64, []float64, []float64, error) {
	ret := _m.Called(measDesc)

	if len(ret) == 0 {
		panic("no return value specified for GetPhaseCurrentLimits")
	}

	var r0 []float64
	var r1 []float64
	var r2 []float64
	var r3 error
	if rf, ok := ret.Get(0).(func([]model.MeasurementDescriptionDataType) ([]float64, []float64, []float64, error)); ok {
		return rf(measDesc)
	}
	if rf, ok := ret.Get(0).(func([]model.MeasurementDescriptionDataType) []float64); ok {
		r0 = rf(measDesc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}

	if rf, ok := ret.Get(1).(func([]model.MeasurementDescriptionDataType) []float64); ok {
		r1 = rf(measDesc)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float64)
		}
	}

	if rf, ok := ret.Get(2).(func([]model.MeasurementDescriptionDataType) []float64); ok {
		r2 = rf(measDesc)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]float64)
		}
	}

	if rf, ok := ret.Get(3).(func([]model.MeasurementDescriptionDataType) error); ok {
		r3 = rf(measDesc)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ElectricalConnectionServerInterface_GetPhaseCurrentLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPhaseCurrentLimits'
type ElectricalConnectionServerInterface_GetPhaseCurrentLimits_Call struct {
	*mock.Call
}

// GetPhaseCurrentLimits is a helper method to define mock.On call
//   - measDesc []model.MeasurementDescriptionDataType
func (_e *ElectricalConnectionServerInterface_Expecter) GetPhaseCurrentLimits(measDesc interface{}) *ElectricalConnectionServerInterface_GetPhaseCurrentLimits_Call {
	return &ElectricalConnectionServerInterface_GetPhaseCurrentLimits_Call{Call: _e.mock.On("GetPhaseCurrentLimits", measDesc)}
}

func (_c *ElectricalConnectionServerInterface_GetPhaseCurrentLimits_Call) Run(run func(measDesc []model.MeasurementDescriptionDataType)) *ElectricalConnectionServerInterface_GetPhaseCurrentLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]model.MeasurementDescriptionDataType))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_GetPhaseCurrentLimits_Call) Return(resultMin []float64, resultMax []float64, resultDefault []float64, resultErr error) *ElectricalConnectionServerInterface_GetPhaseCurrentLimits_Call {
	_c.Call.Return(resultMin, resultMax, resultDefault, resultErr)
	return _c
}

func (_c *ElectricalConnectionServerInterface_GetPhaseCurrentLimits_Call) RunAndReturn(run func([]model.MeasurementDescriptionDataType) ([]float64, []float64, []float64, error)) *ElectricalConnectionServerInterface_GetPhaseCurrentLimits_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCharacteristic provides a mock function with given fields: data, deleteElements
func (_m *ElectricalConnectionServerInterface) UpdateCharacteristic(data model.ElectricalConnectionCharacteristicDataType, deleteElements *model.ElectricalConnectionCharacteristicDataElementsType) error {
	ret := _m.Called(data, deleteElements)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCharacteristic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionCharacteristicDataType, *model.ElectricalConnectionCharacteristicDataElementsType) error); ok {
		r0 = rf(data, deleteElements)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ElectricalConnectionServerInterface_UpdateCharacteristic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCharacteristic'
type ElectricalConnectionServerInterface_UpdateCharacteristic_Call struct {
	*mock.Call
}

// UpdateCharacteristic is a helper method to define mock.On call
//   - data model.ElectricalConnectionCharacteristicDataType
//   - deleteElements *model.ElectricalConnectionCharacteristicDataElementsType
func (_e *ElectricalConnectionServerInterface_Expecter) UpdateCharacteristic(data interface{}, deleteElements interface{}) *ElectricalConnectionServerInterface_UpdateCharacteristic_Call {
	return &ElectricalConnectionServerInterface_UpdateCharacteristic_Call{Call: _e.mock.On("UpdateCharacteristic", data, deleteElements)}
}

func (_c *ElectricalConnectionServerInterface_UpdateCharacteristic_Call) Run(run func(data model.ElectricalConnectionCharacteristicDataType, deleteElements *model.ElectricalConnectionCharacteristicDataElementsType)) *ElectricalConnectionServerInterface_UpdateCharacteristic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionCharacteristicDataType), args[1].(*model.ElectricalConnectionCharacteristicDataElementsType))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_UpdateCharacteristic_Call) Return(_a0 error) *ElectricalConnectionServerInterface_UpdateCharacteristic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ElectricalConnectionServerInterface_UpdateCharacteristic_Call) RunAndReturn(run func(model.ElectricalConnectionCharacteristicDataType, *model.ElectricalConnectionCharacteristicDataElementsType) error) *ElectricalConnectionServerInterface_UpdateCharacteristic_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermittedValueSetForFilters provides a mock function with given fields: data, deleteSelector, deleteElements
func (_m *ElectricalConnectionServerInterface) UpdatePermittedValueSetForFilters(data []api.ElectricalConnectionPermittedValueSetForFilter, deleteSelector *model.ElectricalConnectionPermittedValueSetListDataSelectorsType, deleteElements *model.ElectricalConnectionPermittedValueSetDataElementsType) error {
	ret := _m.Called(data, deleteSelector, deleteElements)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermittedValueSetForFilters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]api.ElectricalConnectionPermittedValueSetForFilter, *model.ElectricalConnectionPermittedValueSetListDataSelectorsType, *model.ElectricalConnectionPermittedValueSetDataElementsType) error); ok {
		r0 = rf(data, deleteSelector, deleteElements)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ElectricalConnectionServerInterface_UpdatePermittedValueSetForFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermittedValueSetForFilters'
type ElectricalConnectionServerInterface_UpdatePermittedValueSetForFilters_Call struct {
	*mock.Call
}

// UpdatePermittedValueSetForFilters is a helper method to define mock.On call
//   - data []api.ElectricalConnectionPermittedValueSetForFilter
//   - deleteSelector *model.ElectricalConnectionPermittedValueSetListDataSelectorsType
//   - deleteElements *model.ElectricalConnectionPermittedValueSetDataElementsType
func (_e *ElectricalConnectionServerInterface_Expecter) UpdatePermittedValueSetForFilters(data interface{}, deleteSelector interface{}, deleteElements interface{}) *ElectricalConnectionServerInterface_UpdatePermittedValueSetForFilters_Call {
	return &ElectricalConnectionServerInterface_UpdatePermittedValueSetForFilters_Call{Call: _e.mock.On("UpdatePermittedValueSetForFilters", data, deleteSelector, deleteElements)}
}

func (_c *ElectricalConnectionServerInterface_UpdatePermittedValueSetForFilters_Call) Run(run func(data []api.ElectricalConnectionPermittedValueSetForFilter, deleteSelector *model.ElectricalConnectionPermittedValueSetListDataSelectorsType, deleteElements *model.ElectricalConnectionPermittedValueSetDataElementsType)) *ElectricalConnectionServerInterface_UpdatePermittedValueSetForFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]api.ElectricalConnectionPermittedValueSetForFilter), args[1].(*model.ElectricalConnectionPermittedValueSetListDataSelectorsType), args[2].(*model.ElectricalConnectionPermittedValueSetDataElementsType))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_UpdatePermittedValueSetForFilters_Call) Return(_a0 error) *ElectricalConnectionServerInterface_UpdatePermittedValueSetForFilters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ElectricalConnectionServerInterface_UpdatePermittedValueSetForFilters_Call) RunAndReturn(run func([]api.ElectricalConnectionPermittedValueSetForFilter, *model.ElectricalConnectionPermittedValueSetListDataSelectorsType, *model.ElectricalConnectionPermittedValueSetDataElementsType) error) *ElectricalConnectionServerInterface_UpdatePermittedValueSetForFilters_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermittedValueSetForIds provides a mock function with given fields: data
func (_m *ElectricalConnectionServerInterface) UpdatePermittedValueSetForIds(data []api.ElectricalConnectionPermittedValueSetForID) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermittedValueSetForIds")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]api.ElectricalConnectionPermittedValueSetForID) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ElectricalConnectionServerInterface_UpdatePermittedValueSetForIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermittedValueSetForIds'
type ElectricalConnectionServerInterface_UpdatePermittedValueSetForIds_Call struct {
	*mock.Call
}

// UpdatePermittedValueSetForIds is a helper method to define mock.On call
//   - data []api.ElectricalConnectionPermittedValueSetForID
func (_e *ElectricalConnectionServerInterface_Expecter) UpdatePermittedValueSetForIds(data interface{}) *ElectricalConnectionServerInterface_UpdatePermittedValueSetForIds_Call {
	return &ElectricalConnectionServerInterface_UpdatePermittedValueSetForIds_Call{Call: _e.mock.On("UpdatePermittedValueSetForIds", data)}
}

func (_c *ElectricalConnectionServerInterface_UpdatePermittedValueSetForIds_Call) Run(run func(data []api.ElectricalConnectionPermittedValueSetForID)) *ElectricalConnectionServerInterface_UpdatePermittedValueSetForIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]api.ElectricalConnectionPermittedValueSetForID))
	})
	return _c
}

func (_c *ElectricalConnectionServerInterface_UpdatePermittedValueSetForIds_Call) Return(_a0 error) *ElectricalConnectionServerInterface_UpdatePermittedValueSetForIds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ElectricalConnectionServerInterface_UpdatePermittedValueSetForIds_Call) RunAndReturn(run func([]api.ElectricalConnectionPermittedValueSetForID) error) *ElectricalConnectionServerInterface_UpdatePermittedValueSetForIds_Call {
	_c.Call.Return(run)
	return _c
}

// NewElectricalConnectionServerInterface creates a new instance of ElectricalConnectionServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewElectricalConnectionServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ElectricalConnectionServerInterface {
	mock := &ElectricalConnectionServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
