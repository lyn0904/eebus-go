// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "github.com/lyn0904/spine-go/model"
	mock "github.com/stretchr/testify/mock"
)

// ElectricalConnectionCommonInterface is an autogenerated mock type for the ElectricalConnectionCommonInterface type
type ElectricalConnectionCommonInterface struct {
	mock.Mock
}

type ElectricalConnectionCommonInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ElectricalConnectionCommonInterface) EXPECT() *ElectricalConnectionCommonInterface_Expecter {
	return &ElectricalConnectionCommonInterface_Expecter{mock: &_m.Mock}
}

// AdjustValueToBeWithinPermittedValuesForParameterId provides a mock function with given fields: value, parameterId
func (_m *ElectricalConnectionCommonInterface) AdjustValueToBeWithinPermittedValuesForParameterId(value float64, parameterId model.ElectricalConnectionParameterIdType) float64 {
	ret := _m.Called(value, parameterId)

	if len(ret) == 0 {
		panic("no return value specified for AdjustValueToBeWithinPermittedValuesForParameterId")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(float64, model.ElectricalConnectionParameterIdType) float64); ok {
		r0 = rf(value, parameterId)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// ElectricalConnectionCommonInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdjustValueToBeWithinPermittedValuesForParameterId'
type ElectricalConnectionCommonInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call struct {
	*mock.Call
}

// AdjustValueToBeWithinPermittedValuesForParameterId is a helper method to define mock.On call
//   - value float64
//   - parameterId model.ElectricalConnectionParameterIdType
func (_e *ElectricalConnectionCommonInterface_Expecter) AdjustValueToBeWithinPermittedValuesForParameterId(value interface{}, parameterId interface{}) *ElectricalConnectionCommonInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call {
	return &ElectricalConnectionCommonInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call{Call: _e.mock.On("AdjustValueToBeWithinPermittedValuesForParameterId", value, parameterId)}
}

func (_c *ElectricalConnectionCommonInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call) Run(run func(value float64, parameterId model.ElectricalConnectionParameterIdType)) *ElectricalConnectionCommonInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(model.ElectricalConnectionParameterIdType))
	})
	return _c
}

func (_c *ElectricalConnectionCommonInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call) Return(_a0 float64) *ElectricalConnectionCommonInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ElectricalConnectionCommonInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call) RunAndReturn(run func(float64, model.ElectricalConnectionParameterIdType) float64) *ElectricalConnectionCommonInterface_AdjustValueToBeWithinPermittedValuesForParameterId_Call {
	_c.Call.Return(run)
	return _c
}

// CheckEventPayloadDataForFilter provides a mock function with given fields: payloadData, filter
func (_m *ElectricalConnectionCommonInterface) CheckEventPayloadDataForFilter(payloadData interface{}, filter interface{}) bool {
	ret := _m.Called(payloadData, filter)

	if len(ret) == 0 {
		panic("no return value specified for CheckEventPayloadDataForFilter")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) bool); ok {
		r0 = rf(payloadData, filter)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ElectricalConnectionCommonInterface_CheckEventPayloadDataForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckEventPayloadDataForFilter'
type ElectricalConnectionCommonInterface_CheckEventPayloadDataForFilter_Call struct {
	*mock.Call
}

// CheckEventPayloadDataForFilter is a helper method to define mock.On call
//   - payloadData interface{}
//   - filter interface{}
func (_e *ElectricalConnectionCommonInterface_Expecter) CheckEventPayloadDataForFilter(payloadData interface{}, filter interface{}) *ElectricalConnectionCommonInterface_CheckEventPayloadDataForFilter_Call {
	return &ElectricalConnectionCommonInterface_CheckEventPayloadDataForFilter_Call{Call: _e.mock.On("CheckEventPayloadDataForFilter", payloadData, filter)}
}

func (_c *ElectricalConnectionCommonInterface_CheckEventPayloadDataForFilter_Call) Run(run func(payloadData interface{}, filter interface{})) *ElectricalConnectionCommonInterface_CheckEventPayloadDataForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *ElectricalConnectionCommonInterface_CheckEventPayloadDataForFilter_Call) Return(_a0 bool) *ElectricalConnectionCommonInterface_CheckEventPayloadDataForFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ElectricalConnectionCommonInterface_CheckEventPayloadDataForFilter_Call) RunAndReturn(run func(interface{}, interface{}) bool) *ElectricalConnectionCommonInterface_CheckEventPayloadDataForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetCharacteristicsForFilter provides a mock function with given fields: filter
func (_m *ElectricalConnectionCommonInterface) GetCharacteristicsForFilter(filter model.ElectricalConnectionCharacteristicDataType) ([]model.ElectricalConnectionCharacteristicDataType, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetCharacteristicsForFilter")
	}

	var r0 []model.ElectricalConnectionCharacteristicDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionCharacteristicDataType) ([]model.ElectricalConnectionCharacteristicDataType, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionCharacteristicDataType) []model.ElectricalConnectionCharacteristicDataType); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ElectricalConnectionCharacteristicDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ElectricalConnectionCharacteristicDataType) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElectricalConnectionCommonInterface_GetCharacteristicsForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCharacteristicsForFilter'
type ElectricalConnectionCommonInterface_GetCharacteristicsForFilter_Call struct {
	*mock.Call
}

// GetCharacteristicsForFilter is a helper method to define mock.On call
//   - filter model.ElectricalConnectionCharacteristicDataType
func (_e *ElectricalConnectionCommonInterface_Expecter) GetCharacteristicsForFilter(filter interface{}) *ElectricalConnectionCommonInterface_GetCharacteristicsForFilter_Call {
	return &ElectricalConnectionCommonInterface_GetCharacteristicsForFilter_Call{Call: _e.mock.On("GetCharacteristicsForFilter", filter)}
}

func (_c *ElectricalConnectionCommonInterface_GetCharacteristicsForFilter_Call) Run(run func(filter model.ElectricalConnectionCharacteristicDataType)) *ElectricalConnectionCommonInterface_GetCharacteristicsForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionCharacteristicDataType))
	})
	return _c
}

func (_c *ElectricalConnectionCommonInterface_GetCharacteristicsForFilter_Call) Return(_a0 []model.ElectricalConnectionCharacteristicDataType, _a1 error) *ElectricalConnectionCommonInterface_GetCharacteristicsForFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ElectricalConnectionCommonInterface_GetCharacteristicsForFilter_Call) RunAndReturn(run func(model.ElectricalConnectionCharacteristicDataType) ([]model.ElectricalConnectionCharacteristicDataType, error)) *ElectricalConnectionCommonInterface_GetCharacteristicsForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetDescriptionForParameterDescriptionFilter provides a mock function with given fields: filter
func (_m *ElectricalConnectionCommonInterface) GetDescriptionForParameterDescriptionFilter(filter model.ElectricalConnectionParameterDescriptionDataType) (*model.ElectricalConnectionDescriptionDataType, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetDescriptionForParameterDescriptionFilter")
	}

	var r0 *model.ElectricalConnectionDescriptionDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionParameterDescriptionDataType) (*model.ElectricalConnectionDescriptionDataType, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionParameterDescriptionDataType) *model.ElectricalConnectionDescriptionDataType); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ElectricalConnectionDescriptionDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ElectricalConnectionParameterDescriptionDataType) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElectricalConnectionCommonInterface_GetDescriptionForParameterDescriptionFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDescriptionForParameterDescriptionFilter'
type ElectricalConnectionCommonInterface_GetDescriptionForParameterDescriptionFilter_Call struct {
	*mock.Call
}

// GetDescriptionForParameterDescriptionFilter is a helper method to define mock.On call
//   - filter model.ElectricalConnectionParameterDescriptionDataType
func (_e *ElectricalConnectionCommonInterface_Expecter) GetDescriptionForParameterDescriptionFilter(filter interface{}) *ElectricalConnectionCommonInterface_GetDescriptionForParameterDescriptionFilter_Call {
	return &ElectricalConnectionCommonInterface_GetDescriptionForParameterDescriptionFilter_Call{Call: _e.mock.On("GetDescriptionForParameterDescriptionFilter", filter)}
}

func (_c *ElectricalConnectionCommonInterface_GetDescriptionForParameterDescriptionFilter_Call) Run(run func(filter model.ElectricalConnectionParameterDescriptionDataType)) *ElectricalConnectionCommonInterface_GetDescriptionForParameterDescriptionFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionParameterDescriptionDataType))
	})
	return _c
}

func (_c *ElectricalConnectionCommonInterface_GetDescriptionForParameterDescriptionFilter_Call) Return(_a0 *model.ElectricalConnectionDescriptionDataType, _a1 error) *ElectricalConnectionCommonInterface_GetDescriptionForParameterDescriptionFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ElectricalConnectionCommonInterface_GetDescriptionForParameterDescriptionFilter_Call) RunAndReturn(run func(model.ElectricalConnectionParameterDescriptionDataType) (*model.ElectricalConnectionDescriptionDataType, error)) *ElectricalConnectionCommonInterface_GetDescriptionForParameterDescriptionFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetDescriptionsForFilter provides a mock function with given fields: filter
func (_m *ElectricalConnectionCommonInterface) GetDescriptionsForFilter(filter model.ElectricalConnectionDescriptionDataType) ([]model.ElectricalConnectionDescriptionDataType, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetDescriptionsForFilter")
	}

	var r0 []model.ElectricalConnectionDescriptionDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionDescriptionDataType) ([]model.ElectricalConnectionDescriptionDataType, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionDescriptionDataType) []model.ElectricalConnectionDescriptionDataType); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ElectricalConnectionDescriptionDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ElectricalConnectionDescriptionDataType) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElectricalConnectionCommonInterface_GetDescriptionsForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDescriptionsForFilter'
type ElectricalConnectionCommonInterface_GetDescriptionsForFilter_Call struct {
	*mock.Call
}

// GetDescriptionsForFilter is a helper method to define mock.On call
//   - filter model.ElectricalConnectionDescriptionDataType
func (_e *ElectricalConnectionCommonInterface_Expecter) GetDescriptionsForFilter(filter interface{}) *ElectricalConnectionCommonInterface_GetDescriptionsForFilter_Call {
	return &ElectricalConnectionCommonInterface_GetDescriptionsForFilter_Call{Call: _e.mock.On("GetDescriptionsForFilter", filter)}
}

func (_c *ElectricalConnectionCommonInterface_GetDescriptionsForFilter_Call) Run(run func(filter model.ElectricalConnectionDescriptionDataType)) *ElectricalConnectionCommonInterface_GetDescriptionsForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionDescriptionDataType))
	})
	return _c
}

func (_c *ElectricalConnectionCommonInterface_GetDescriptionsForFilter_Call) Return(_a0 []model.ElectricalConnectionDescriptionDataType, _a1 error) *ElectricalConnectionCommonInterface_GetDescriptionsForFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ElectricalConnectionCommonInterface_GetDescriptionsForFilter_Call) RunAndReturn(run func(model.ElectricalConnectionDescriptionDataType) ([]model.ElectricalConnectionDescriptionDataType, error)) *ElectricalConnectionCommonInterface_GetDescriptionsForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetParameterDescriptionsForFilter provides a mock function with given fields: filter
func (_m *ElectricalConnectionCommonInterface) GetParameterDescriptionsForFilter(filter model.ElectricalConnectionParameterDescriptionDataType) ([]model.ElectricalConnectionParameterDescriptionDataType, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetParameterDescriptionsForFilter")
	}

	var r0 []model.ElectricalConnectionParameterDescriptionDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionParameterDescriptionDataType) ([]model.ElectricalConnectionParameterDescriptionDataType, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionParameterDescriptionDataType) []model.ElectricalConnectionParameterDescriptionDataType); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ElectricalConnectionParameterDescriptionDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ElectricalConnectionParameterDescriptionDataType) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElectricalConnectionCommonInterface_GetParameterDescriptionsForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParameterDescriptionsForFilter'
type ElectricalConnectionCommonInterface_GetParameterDescriptionsForFilter_Call struct {
	*mock.Call
}

// GetParameterDescriptionsForFilter is a helper method to define mock.On call
//   - filter model.ElectricalConnectionParameterDescriptionDataType
func (_e *ElectricalConnectionCommonInterface_Expecter) GetParameterDescriptionsForFilter(filter interface{}) *ElectricalConnectionCommonInterface_GetParameterDescriptionsForFilter_Call {
	return &ElectricalConnectionCommonInterface_GetParameterDescriptionsForFilter_Call{Call: _e.mock.On("GetParameterDescriptionsForFilter", filter)}
}

func (_c *ElectricalConnectionCommonInterface_GetParameterDescriptionsForFilter_Call) Run(run func(filter model.ElectricalConnectionParameterDescriptionDataType)) *ElectricalConnectionCommonInterface_GetParameterDescriptionsForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionParameterDescriptionDataType))
	})
	return _c
}

func (_c *ElectricalConnectionCommonInterface_GetParameterDescriptionsForFilter_Call) Return(_a0 []model.ElectricalConnectionParameterDescriptionDataType, _a1 error) *ElectricalConnectionCommonInterface_GetParameterDescriptionsForFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ElectricalConnectionCommonInterface_GetParameterDescriptionsForFilter_Call) RunAndReturn(run func(model.ElectricalConnectionParameterDescriptionDataType) ([]model.ElectricalConnectionParameterDescriptionDataType, error)) *ElectricalConnectionCommonInterface_GetParameterDescriptionsForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermittedValueDataForFilter provides a mock function with given fields: filter
func (_m *ElectricalConnectionCommonInterface) GetPermittedValueDataForFilter(filter model.ElectricalConnectionPermittedValueSetDataType) (float64, float64, float64, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetPermittedValueDataForFilter")
	}

	var r0 float64
	var r1 float64
	var r2 float64
	var r3 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionPermittedValueSetDataType) (float64, float64, float64, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionPermittedValueSetDataType) float64); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(model.ElectricalConnectionPermittedValueSetDataType) float64); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(model.ElectricalConnectionPermittedValueSetDataType) float64); ok {
		r2 = rf(filter)
	} else {
		r2 = ret.Get(2).(float64)
	}

	if rf, ok := ret.Get(3).(func(model.ElectricalConnectionPermittedValueSetDataType) error); ok {
		r3 = rf(filter)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ElectricalConnectionCommonInterface_GetPermittedValueDataForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermittedValueDataForFilter'
type ElectricalConnectionCommonInterface_GetPermittedValueDataForFilter_Call struct {
	*mock.Call
}

// GetPermittedValueDataForFilter is a helper method to define mock.On call
//   - filter model.ElectricalConnectionPermittedValueSetDataType
func (_e *ElectricalConnectionCommonInterface_Expecter) GetPermittedValueDataForFilter(filter interface{}) *ElectricalConnectionCommonInterface_GetPermittedValueDataForFilter_Call {
	return &ElectricalConnectionCommonInterface_GetPermittedValueDataForFilter_Call{Call: _e.mock.On("GetPermittedValueDataForFilter", filter)}
}

func (_c *ElectricalConnectionCommonInterface_GetPermittedValueDataForFilter_Call) Run(run func(filter model.ElectricalConnectionPermittedValueSetDataType)) *ElectricalConnectionCommonInterface_GetPermittedValueDataForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionPermittedValueSetDataType))
	})
	return _c
}

func (_c *ElectricalConnectionCommonInterface_GetPermittedValueDataForFilter_Call) Return(_a0 float64, _a1 float64, _a2 float64, _a3 error) *ElectricalConnectionCommonInterface_GetPermittedValueDataForFilter_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *ElectricalConnectionCommonInterface_GetPermittedValueDataForFilter_Call) RunAndReturn(run func(model.ElectricalConnectionPermittedValueSetDataType) (float64, float64, float64, error)) *ElectricalConnectionCommonInterface_GetPermittedValueDataForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermittedValueSetForFilter provides a mock function with given fields: filter
func (_m *ElectricalConnectionCommonInterface) GetPermittedValueSetForFilter(filter model.ElectricalConnectionPermittedValueSetDataType) ([]model.ElectricalConnectionPermittedValueSetDataType, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetPermittedValueSetForFilter")
	}

	var r0 []model.ElectricalConnectionPermittedValueSetDataType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionPermittedValueSetDataType) ([]model.ElectricalConnectionPermittedValueSetDataType, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.ElectricalConnectionPermittedValueSetDataType) []model.ElectricalConnectionPermittedValueSetDataType); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ElectricalConnectionPermittedValueSetDataType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ElectricalConnectionPermittedValueSetDataType) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElectricalConnectionCommonInterface_GetPermittedValueSetForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermittedValueSetForFilter'
type ElectricalConnectionCommonInterface_GetPermittedValueSetForFilter_Call struct {
	*mock.Call
}

// GetPermittedValueSetForFilter is a helper method to define mock.On call
//   - filter model.ElectricalConnectionPermittedValueSetDataType
func (_e *ElectricalConnectionCommonInterface_Expecter) GetPermittedValueSetForFilter(filter interface{}) *ElectricalConnectionCommonInterface_GetPermittedValueSetForFilter_Call {
	return &ElectricalConnectionCommonInterface_GetPermittedValueSetForFilter_Call{Call: _e.mock.On("GetPermittedValueSetForFilter", filter)}
}

func (_c *ElectricalConnectionCommonInterface_GetPermittedValueSetForFilter_Call) Run(run func(filter model.ElectricalConnectionPermittedValueSetDataType)) *ElectricalConnectionCommonInterface_GetPermittedValueSetForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.ElectricalConnectionPermittedValueSetDataType))
	})
	return _c
}

func (_c *ElectricalConnectionCommonInterface_GetPermittedValueSetForFilter_Call) Return(_a0 []model.ElectricalConnectionPermittedValueSetDataType, _a1 error) *ElectricalConnectionCommonInterface_GetPermittedValueSetForFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ElectricalConnectionCommonInterface_GetPermittedValueSetForFilter_Call) RunAndReturn(run func(model.ElectricalConnectionPermittedValueSetDataType) ([]model.ElectricalConnectionPermittedValueSetDataType, error)) *ElectricalConnectionCommonInterface_GetPermittedValueSetForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetPhaseCurrentLimits provides a mock function with given fields: measDesc
func (_m *ElectricalConnectionCommonInterface) GetPhaseCurrentLimits(measDesc []model.MeasurementDescriptionDataType) ([]float64, []float64, []float64, error) {
	ret := _m.Called(measDesc)

	if len(ret) == 0 {
		panic("no return value specified for GetPhaseCurrentLimits")
	}

	var r0 []float64
	var r1 []float64
	var r2 []float64
	var r3 error
	if rf, ok := ret.Get(0).(func([]model.MeasurementDescriptionDataType) ([]float64, []float64, []float64, error)); ok {
		return rf(measDesc)
	}
	if rf, ok := ret.Get(0).(func([]model.MeasurementDescriptionDataType) []float64); ok {
		r0 = rf(measDesc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}

	if rf, ok := ret.Get(1).(func([]model.MeasurementDescriptionDataType) []float64); ok {
		r1 = rf(measDesc)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float64)
		}
	}

	if rf, ok := ret.Get(2).(func([]model.MeasurementDescriptionDataType) []float64); ok {
		r2 = rf(measDesc)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]float64)
		}
	}

	if rf, ok := ret.Get(3).(func([]model.MeasurementDescriptionDataType) error); ok {
		r3 = rf(measDesc)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ElectricalConnectionCommonInterface_GetPhaseCurrentLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPhaseCurrentLimits'
type ElectricalConnectionCommonInterface_GetPhaseCurrentLimits_Call struct {
	*mock.Call
}

// GetPhaseCurrentLimits is a helper method to define mock.On call
//   - measDesc []model.MeasurementDescriptionDataType
func (_e *ElectricalConnectionCommonInterface_Expecter) GetPhaseCurrentLimits(measDesc interface{}) *ElectricalConnectionCommonInterface_GetPhaseCurrentLimits_Call {
	return &ElectricalConnectionCommonInterface_GetPhaseCurrentLimits_Call{Call: _e.mock.On("GetPhaseCurrentLimits", measDesc)}
}

func (_c *ElectricalConnectionCommonInterface_GetPhaseCurrentLimits_Call) Run(run func(measDesc []model.MeasurementDescriptionDataType)) *ElectricalConnectionCommonInterface_GetPhaseCurrentLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]model.MeasurementDescriptionDataType))
	})
	return _c
}

func (_c *ElectricalConnectionCommonInterface_GetPhaseCurrentLimits_Call) Return(resultMin []float64, resultMax []float64, resultDefault []float64, resultErr error) *ElectricalConnectionCommonInterface_GetPhaseCurrentLimits_Call {
	_c.Call.Return(resultMin, resultMax, resultDefault, resultErr)
	return _c
}

func (_c *ElectricalConnectionCommonInterface_GetPhaseCurrentLimits_Call) RunAndReturn(run func([]model.MeasurementDescriptionDataType) ([]float64, []float64, []float64, error)) *ElectricalConnectionCommonInterface_GetPhaseCurrentLimits_Call {
	_c.Call.Return(run)
	return _c
}

// NewElectricalConnectionCommonInterface creates a new instance of ElectricalConnectionCommonInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewElectricalConnectionCommonInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ElectricalConnectionCommonInterface {
	mock := &ElectricalConnectionCommonInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
