// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	api "github.com/lyn0904/eebus-go/api"
	logging "github.com/lyn0904/ship-go/logging"

	mock "github.com/stretchr/testify/mock"

	ship_goapi "github.com/lyn0904/ship-go/api"

	spine_goapi "github.com/lyn0904/spine-go/api"
)

// ServiceInterface is an autogenerated mock type for the ServiceInterface type
type ServiceInterface struct {
	mock.Mock
}

type ServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceInterface) EXPECT() *ServiceInterface_Expecter {
	return &ServiceInterface_Expecter{mock: &_m.Mock}
}

// AddUseCase provides a mock function with given fields: useCase
func (_m *ServiceInterface) AddUseCase(useCase api.UseCaseInterface) {
	_m.Called(useCase)
}

// ServiceInterface_AddUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUseCase'
type ServiceInterface_AddUseCase_Call struct {
	*mock.Call
}

// AddUseCase is a helper method to define mock.On call
//   - useCase api.UseCaseInterface
func (_e *ServiceInterface_Expecter) AddUseCase(useCase interface{}) *ServiceInterface_AddUseCase_Call {
	return &ServiceInterface_AddUseCase_Call{Call: _e.mock.On("AddUseCase", useCase)}
}

func (_c *ServiceInterface_AddUseCase_Call) Run(run func(useCase api.UseCaseInterface)) *ServiceInterface_AddUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.UseCaseInterface))
	})
	return _c
}

func (_c *ServiceInterface_AddUseCase_Call) Return() *ServiceInterface_AddUseCase_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceInterface_AddUseCase_Call) RunAndReturn(run func(api.UseCaseInterface)) *ServiceInterface_AddUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// CancelPairingWithSKI provides a mock function with given fields: ski
func (_m *ServiceInterface) CancelPairingWithSKI(ski string) {
	_m.Called(ski)
}

// ServiceInterface_CancelPairingWithSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelPairingWithSKI'
type ServiceInterface_CancelPairingWithSKI_Call struct {
	*mock.Call
}

// CancelPairingWithSKI is a helper method to define mock.On call
//   - ski string
func (_e *ServiceInterface_Expecter) CancelPairingWithSKI(ski interface{}) *ServiceInterface_CancelPairingWithSKI_Call {
	return &ServiceInterface_CancelPairingWithSKI_Call{Call: _e.mock.On("CancelPairingWithSKI", ski)}
}

func (_c *ServiceInterface_CancelPairingWithSKI_Call) Run(run func(ski string)) *ServiceInterface_CancelPairingWithSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ServiceInterface_CancelPairingWithSKI_Call) Return() *ServiceInterface_CancelPairingWithSKI_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceInterface_CancelPairingWithSKI_Call) RunAndReturn(run func(string)) *ServiceInterface_CancelPairingWithSKI_Call {
	_c.Call.Return(run)
	return _c
}

// Configuration provides a mock function with given fields:
func (_m *ServiceInterface) Configuration() *api.Configuration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Configuration")
	}

	var r0 *api.Configuration
	if rf, ok := ret.Get(0).(func() *api.Configuration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Configuration)
		}
	}

	return r0
}

// ServiceInterface_Configuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configuration'
type ServiceInterface_Configuration_Call struct {
	*mock.Call
}

// Configuration is a helper method to define mock.On call
func (_e *ServiceInterface_Expecter) Configuration() *ServiceInterface_Configuration_Call {
	return &ServiceInterface_Configuration_Call{Call: _e.mock.On("Configuration")}
}

func (_c *ServiceInterface_Configuration_Call) Run(run func()) *ServiceInterface_Configuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceInterface_Configuration_Call) Return(_a0 *api.Configuration) *ServiceInterface_Configuration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceInterface_Configuration_Call) RunAndReturn(run func() *api.Configuration) *ServiceInterface_Configuration_Call {
	_c.Call.Return(run)
	return _c
}

// DisconnectSKI provides a mock function with given fields: ski, reason
func (_m *ServiceInterface) DisconnectSKI(ski string, reason string) {
	_m.Called(ski, reason)
}

// ServiceInterface_DisconnectSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisconnectSKI'
type ServiceInterface_DisconnectSKI_Call struct {
	*mock.Call
}

// DisconnectSKI is a helper method to define mock.On call
//   - ski string
//   - reason string
func (_e *ServiceInterface_Expecter) DisconnectSKI(ski interface{}, reason interface{}) *ServiceInterface_DisconnectSKI_Call {
	return &ServiceInterface_DisconnectSKI_Call{Call: _e.mock.On("DisconnectSKI", ski, reason)}
}

func (_c *ServiceInterface_DisconnectSKI_Call) Run(run func(ski string, reason string)) *ServiceInterface_DisconnectSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ServiceInterface_DisconnectSKI_Call) Return() *ServiceInterface_DisconnectSKI_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceInterface_DisconnectSKI_Call) RunAndReturn(run func(string, string)) *ServiceInterface_DisconnectSKI_Call {
	_c.Call.Return(run)
	return _c
}

// IsAutoAcceptEnabled provides a mock function with given fields:
func (_m *ServiceInterface) IsAutoAcceptEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsAutoAcceptEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ServiceInterface_IsAutoAcceptEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAutoAcceptEnabled'
type ServiceInterface_IsAutoAcceptEnabled_Call struct {
	*mock.Call
}

// IsAutoAcceptEnabled is a helper method to define mock.On call
func (_e *ServiceInterface_Expecter) IsAutoAcceptEnabled() *ServiceInterface_IsAutoAcceptEnabled_Call {
	return &ServiceInterface_IsAutoAcceptEnabled_Call{Call: _e.mock.On("IsAutoAcceptEnabled")}
}

func (_c *ServiceInterface_IsAutoAcceptEnabled_Call) Run(run func()) *ServiceInterface_IsAutoAcceptEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceInterface_IsAutoAcceptEnabled_Call) Return(_a0 bool) *ServiceInterface_IsAutoAcceptEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceInterface_IsAutoAcceptEnabled_Call) RunAndReturn(run func() bool) *ServiceInterface_IsAutoAcceptEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function with given fields:
func (_m *ServiceInterface) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ServiceInterface_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type ServiceInterface_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *ServiceInterface_Expecter) IsRunning() *ServiceInterface_IsRunning_Call {
	return &ServiceInterface_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *ServiceInterface_IsRunning_Call) Run(run func()) *ServiceInterface_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceInterface_IsRunning_Call) Return(_a0 bool) *ServiceInterface_IsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceInterface_IsRunning_Call) RunAndReturn(run func() bool) *ServiceInterface_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// LocalDevice provides a mock function with given fields:
func (_m *ServiceInterface) LocalDevice() spine_goapi.DeviceLocalInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalDevice")
	}

	var r0 spine_goapi.DeviceLocalInterface
	if rf, ok := ret.Get(0).(func() spine_goapi.DeviceLocalInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spine_goapi.DeviceLocalInterface)
		}
	}

	return r0
}

// ServiceInterface_LocalDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalDevice'
type ServiceInterface_LocalDevice_Call struct {
	*mock.Call
}

// LocalDevice is a helper method to define mock.On call
func (_e *ServiceInterface_Expecter) LocalDevice() *ServiceInterface_LocalDevice_Call {
	return &ServiceInterface_LocalDevice_Call{Call: _e.mock.On("LocalDevice")}
}

func (_c *ServiceInterface_LocalDevice_Call) Run(run func()) *ServiceInterface_LocalDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceInterface_LocalDevice_Call) Return(_a0 spine_goapi.DeviceLocalInterface) *ServiceInterface_LocalDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceInterface_LocalDevice_Call) RunAndReturn(run func() spine_goapi.DeviceLocalInterface) *ServiceInterface_LocalDevice_Call {
	_c.Call.Return(run)
	return _c
}

// LocalService provides a mock function with given fields:
func (_m *ServiceInterface) LocalService() *ship_goapi.ServiceDetails {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalService")
	}

	var r0 *ship_goapi.ServiceDetails
	if rf, ok := ret.Get(0).(func() *ship_goapi.ServiceDetails); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ship_goapi.ServiceDetails)
		}
	}

	return r0
}

// ServiceInterface_LocalService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalService'
type ServiceInterface_LocalService_Call struct {
	*mock.Call
}

// LocalService is a helper method to define mock.On call
func (_e *ServiceInterface_Expecter) LocalService() *ServiceInterface_LocalService_Call {
	return &ServiceInterface_LocalService_Call{Call: _e.mock.On("LocalService")}
}

func (_c *ServiceInterface_LocalService_Call) Run(run func()) *ServiceInterface_LocalService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceInterface_LocalService_Call) Return(_a0 *ship_goapi.ServiceDetails) *ServiceInterface_LocalService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceInterface_LocalService_Call) RunAndReturn(run func() *ship_goapi.ServiceDetails) *ServiceInterface_LocalService_Call {
	_c.Call.Return(run)
	return _c
}

// PairingDetailForSki provides a mock function with given fields: ski
func (_m *ServiceInterface) PairingDetailForSki(ski string) *ship_goapi.ConnectionStateDetail {
	ret := _m.Called(ski)

	if len(ret) == 0 {
		panic("no return value specified for PairingDetailForSki")
	}

	var r0 *ship_goapi.ConnectionStateDetail
	if rf, ok := ret.Get(0).(func(string) *ship_goapi.ConnectionStateDetail); ok {
		r0 = rf(ski)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ship_goapi.ConnectionStateDetail)
		}
	}

	return r0
}

// ServiceInterface_PairingDetailForSki_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PairingDetailForSki'
type ServiceInterface_PairingDetailForSki_Call struct {
	*mock.Call
}

// PairingDetailForSki is a helper method to define mock.On call
//   - ski string
func (_e *ServiceInterface_Expecter) PairingDetailForSki(ski interface{}) *ServiceInterface_PairingDetailForSki_Call {
	return &ServiceInterface_PairingDetailForSki_Call{Call: _e.mock.On("PairingDetailForSki", ski)}
}

func (_c *ServiceInterface_PairingDetailForSki_Call) Run(run func(ski string)) *ServiceInterface_PairingDetailForSki_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ServiceInterface_PairingDetailForSki_Call) Return(_a0 *ship_goapi.ConnectionStateDetail) *ServiceInterface_PairingDetailForSki_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceInterface_PairingDetailForSki_Call) RunAndReturn(run func(string) *ship_goapi.ConnectionStateDetail) *ServiceInterface_PairingDetailForSki_Call {
	_c.Call.Return(run)
	return _c
}

// QRCodeText provides a mock function with given fields:
func (_m *ServiceInterface) QRCodeText() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QRCodeText")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ServiceInterface_QRCodeText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QRCodeText'
type ServiceInterface_QRCodeText_Call struct {
	*mock.Call
}

// QRCodeText is a helper method to define mock.On call
func (_e *ServiceInterface_Expecter) QRCodeText() *ServiceInterface_QRCodeText_Call {
	return &ServiceInterface_QRCodeText_Call{Call: _e.mock.On("QRCodeText")}
}

func (_c *ServiceInterface_QRCodeText_Call) Run(run func()) *ServiceInterface_QRCodeText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceInterface_QRCodeText_Call) Return(_a0 string) *ServiceInterface_QRCodeText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceInterface_QRCodeText_Call) RunAndReturn(run func() string) *ServiceInterface_QRCodeText_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterRemoteSKI provides a mock function with given fields: ski
func (_m *ServiceInterface) RegisterRemoteSKI(ski string) {
	_m.Called(ski)
}

// ServiceInterface_RegisterRemoteSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterRemoteSKI'
type ServiceInterface_RegisterRemoteSKI_Call struct {
	*mock.Call
}

// RegisterRemoteSKI is a helper method to define mock.On call
//   - ski string
func (_e *ServiceInterface_Expecter) RegisterRemoteSKI(ski interface{}) *ServiceInterface_RegisterRemoteSKI_Call {
	return &ServiceInterface_RegisterRemoteSKI_Call{Call: _e.mock.On("RegisterRemoteSKI", ski)}
}

func (_c *ServiceInterface_RegisterRemoteSKI_Call) Run(run func(ski string)) *ServiceInterface_RegisterRemoteSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ServiceInterface_RegisterRemoteSKI_Call) Return() *ServiceInterface_RegisterRemoteSKI_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceInterface_RegisterRemoteSKI_Call) RunAndReturn(run func(string)) *ServiceInterface_RegisterRemoteSKI_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteServiceForSKI provides a mock function with given fields: ski
func (_m *ServiceInterface) RemoteServiceForSKI(ski string) *ship_goapi.ServiceDetails {
	ret := _m.Called(ski)

	if len(ret) == 0 {
		panic("no return value specified for RemoteServiceForSKI")
	}

	var r0 *ship_goapi.ServiceDetails
	if rf, ok := ret.Get(0).(func(string) *ship_goapi.ServiceDetails); ok {
		r0 = rf(ski)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ship_goapi.ServiceDetails)
		}
	}

	return r0
}

// ServiceInterface_RemoteServiceForSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteServiceForSKI'
type ServiceInterface_RemoteServiceForSKI_Call struct {
	*mock.Call
}

// RemoteServiceForSKI is a helper method to define mock.On call
//   - ski string
func (_e *ServiceInterface_Expecter) RemoteServiceForSKI(ski interface{}) *ServiceInterface_RemoteServiceForSKI_Call {
	return &ServiceInterface_RemoteServiceForSKI_Call{Call: _e.mock.On("RemoteServiceForSKI", ski)}
}

func (_c *ServiceInterface_RemoteServiceForSKI_Call) Run(run func(ski string)) *ServiceInterface_RemoteServiceForSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ServiceInterface_RemoteServiceForSKI_Call) Return(_a0 *ship_goapi.ServiceDetails) *ServiceInterface_RemoteServiceForSKI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceInterface_RemoteServiceForSKI_Call) RunAndReturn(run func(string) *ship_goapi.ServiceDetails) *ServiceInterface_RemoteServiceForSKI_Call {
	_c.Call.Return(run)
	return _c
}

// SetAutoAccept provides a mock function with given fields: value
func (_m *ServiceInterface) SetAutoAccept(value bool) {
	_m.Called(value)
}

// ServiceInterface_SetAutoAccept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAutoAccept'
type ServiceInterface_SetAutoAccept_Call struct {
	*mock.Call
}

// SetAutoAccept is a helper method to define mock.On call
//   - value bool
func (_e *ServiceInterface_Expecter) SetAutoAccept(value interface{}) *ServiceInterface_SetAutoAccept_Call {
	return &ServiceInterface_SetAutoAccept_Call{Call: _e.mock.On("SetAutoAccept", value)}
}

func (_c *ServiceInterface_SetAutoAccept_Call) Run(run func(value bool)) *ServiceInterface_SetAutoAccept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *ServiceInterface_SetAutoAccept_Call) Return() *ServiceInterface_SetAutoAccept_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceInterface_SetAutoAccept_Call) RunAndReturn(run func(bool)) *ServiceInterface_SetAutoAccept_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogging provides a mock function with given fields: logger
func (_m *ServiceInterface) SetLogging(logger logging.LoggingInterface) {
	_m.Called(logger)
}

// ServiceInterface_SetLogging_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogging'
type ServiceInterface_SetLogging_Call struct {
	*mock.Call
}

// SetLogging is a helper method to define mock.On call
//   - logger logging.LoggingInterface
func (_e *ServiceInterface_Expecter) SetLogging(logger interface{}) *ServiceInterface_SetLogging_Call {
	return &ServiceInterface_SetLogging_Call{Call: _e.mock.On("SetLogging", logger)}
}

func (_c *ServiceInterface_SetLogging_Call) Run(run func(logger logging.LoggingInterface)) *ServiceInterface_SetLogging_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logging.LoggingInterface))
	})
	return _c
}

func (_c *ServiceInterface_SetLogging_Call) Return() *ServiceInterface_SetLogging_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceInterface_SetLogging_Call) RunAndReturn(run func(logging.LoggingInterface)) *ServiceInterface_SetLogging_Call {
	_c.Call.Return(run)
	return _c
}

// Setup provides a mock function with given fields:
func (_m *ServiceInterface) Setup() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceInterface_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type ServiceInterface_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
func (_e *ServiceInterface_Expecter) Setup() *ServiceInterface_Setup_Call {
	return &ServiceInterface_Setup_Call{Call: _e.mock.On("Setup")}
}

func (_c *ServiceInterface_Setup_Call) Run(run func()) *ServiceInterface_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceInterface_Setup_Call) Return(_a0 error) *ServiceInterface_Setup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceInterface_Setup_Call) RunAndReturn(run func() error) *ServiceInterface_Setup_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *ServiceInterface) Shutdown() {
	_m.Called()
}

// ServiceInterface_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type ServiceInterface_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *ServiceInterface_Expecter) Shutdown() *ServiceInterface_Shutdown_Call {
	return &ServiceInterface_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *ServiceInterface_Shutdown_Call) Run(run func()) *ServiceInterface_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceInterface_Shutdown_Call) Return() *ServiceInterface_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceInterface_Shutdown_Call) RunAndReturn(run func()) *ServiceInterface_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *ServiceInterface) Start() {
	_m.Called()
}

// ServiceInterface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type ServiceInterface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *ServiceInterface_Expecter) Start() *ServiceInterface_Start_Call {
	return &ServiceInterface_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *ServiceInterface_Start_Call) Run(run func()) *ServiceInterface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceInterface_Start_Call) Return() *ServiceInterface_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceInterface_Start_Call) RunAndReturn(run func()) *ServiceInterface_Start_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterRemoteSKI provides a mock function with given fields: ski
func (_m *ServiceInterface) UnregisterRemoteSKI(ski string) {
	_m.Called(ski)
}

// ServiceInterface_UnregisterRemoteSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterRemoteSKI'
type ServiceInterface_UnregisterRemoteSKI_Call struct {
	*mock.Call
}

// UnregisterRemoteSKI is a helper method to define mock.On call
//   - ski string
func (_e *ServiceInterface_Expecter) UnregisterRemoteSKI(ski interface{}) *ServiceInterface_UnregisterRemoteSKI_Call {
	return &ServiceInterface_UnregisterRemoteSKI_Call{Call: _e.mock.On("UnregisterRemoteSKI", ski)}
}

func (_c *ServiceInterface_UnregisterRemoteSKI_Call) Run(run func(ski string)) *ServiceInterface_UnregisterRemoteSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ServiceInterface_UnregisterRemoteSKI_Call) Return() *ServiceInterface_UnregisterRemoteSKI_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceInterface_UnregisterRemoteSKI_Call) RunAndReturn(run func(string)) *ServiceInterface_UnregisterRemoteSKI_Call {
	_c.Call.Return(run)
	return _c
}

// UserIsAbleToApproveOrCancelPairingRequests provides a mock function with given fields: allow
func (_m *ServiceInterface) UserIsAbleToApproveOrCancelPairingRequests(allow bool) {
	_m.Called(allow)
}

// ServiceInterface_UserIsAbleToApproveOrCancelPairingRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserIsAbleToApproveOrCancelPairingRequests'
type ServiceInterface_UserIsAbleToApproveOrCancelPairingRequests_Call struct {
	*mock.Call
}

// UserIsAbleToApproveOrCancelPairingRequests is a helper method to define mock.On call
//   - allow bool
func (_e *ServiceInterface_Expecter) UserIsAbleToApproveOrCancelPairingRequests(allow interface{}) *ServiceInterface_UserIsAbleToApproveOrCancelPairingRequests_Call {
	return &ServiceInterface_UserIsAbleToApproveOrCancelPairingRequests_Call{Call: _e.mock.On("UserIsAbleToApproveOrCancelPairingRequests", allow)}
}

func (_c *ServiceInterface_UserIsAbleToApproveOrCancelPairingRequests_Call) Run(run func(allow bool)) *ServiceInterface_UserIsAbleToApproveOrCancelPairingRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *ServiceInterface_UserIsAbleToApproveOrCancelPairingRequests_Call) Return() *ServiceInterface_UserIsAbleToApproveOrCancelPairingRequests_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceInterface_UserIsAbleToApproveOrCancelPairingRequests_Call) RunAndReturn(run func(bool)) *ServiceInterface_UserIsAbleToApproveOrCancelPairingRequests_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceInterface creates a new instance of ServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceInterface {
	mock := &ServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
