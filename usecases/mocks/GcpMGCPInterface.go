// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	eebus_goapi "github.com/lyn0904/eebus-go/api"
	mock "github.com/stretchr/testify/mock"

	spine_goapi "github.com/lyn0904/spine-go/api"
)

// GcpMGCPInterface is an autogenerated mock type for the GcpMGCPInterface type
type GcpMGCPInterface struct {
	mock.Mock
}

type GcpMGCPInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GcpMGCPInterface) EXPECT() *GcpMGCPInterface_Expecter {
	return &GcpMGCPInterface_Expecter{mock: &_m.Mock}
}

// AddFeatures provides a mock function with given fields:
func (_m *GcpMGCPInterface) AddFeatures() {
	_m.Called()
}

// GcpMGCPInterface_AddFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFeatures'
type GcpMGCPInterface_AddFeatures_Call struct {
	*mock.Call
}

// AddFeatures is a helper method to define mock.On call
func (_e *GcpMGCPInterface_Expecter) AddFeatures() *GcpMGCPInterface_AddFeatures_Call {
	return &GcpMGCPInterface_AddFeatures_Call{Call: _e.mock.On("AddFeatures")}
}

func (_c *GcpMGCPInterface_AddFeatures_Call) Run(run func()) *GcpMGCPInterface_AddFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GcpMGCPInterface_AddFeatures_Call) Return() *GcpMGCPInterface_AddFeatures_Call {
	_c.Call.Return()
	return _c
}

func (_c *GcpMGCPInterface_AddFeatures_Call) RunAndReturn(run func()) *GcpMGCPInterface_AddFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// AddUseCase provides a mock function with given fields:
func (_m *GcpMGCPInterface) AddUseCase() {
	_m.Called()
}

// GcpMGCPInterface_AddUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUseCase'
type GcpMGCPInterface_AddUseCase_Call struct {
	*mock.Call
}

// AddUseCase is a helper method to define mock.On call
func (_e *GcpMGCPInterface_Expecter) AddUseCase() *GcpMGCPInterface_AddUseCase_Call {
	return &GcpMGCPInterface_AddUseCase_Call{Call: _e.mock.On("AddUseCase")}
}

func (_c *GcpMGCPInterface_AddUseCase_Call) Run(run func()) *GcpMGCPInterface_AddUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GcpMGCPInterface_AddUseCase_Call) Return() *GcpMGCPInterface_AddUseCase_Call {
	_c.Call.Return()
	return _c
}

func (_c *GcpMGCPInterface_AddUseCase_Call) RunAndReturn(run func()) *GcpMGCPInterface_AddUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// AvailableScenariosForEntity provides a mock function with given fields: entity
func (_m *GcpMGCPInterface) AvailableScenariosForEntity(entity spine_goapi.EntityRemoteInterface) []uint {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for AvailableScenariosForEntity")
	}

	var r0 []uint
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) []uint); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint)
		}
	}

	return r0
}

// GcpMGCPInterface_AvailableScenariosForEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AvailableScenariosForEntity'
type GcpMGCPInterface_AvailableScenariosForEntity_Call struct {
	*mock.Call
}

// AvailableScenariosForEntity is a helper method to define mock.On call
//   - entity spine_goapi.EntityRemoteInterface
func (_e *GcpMGCPInterface_Expecter) AvailableScenariosForEntity(entity interface{}) *GcpMGCPInterface_AvailableScenariosForEntity_Call {
	return &GcpMGCPInterface_AvailableScenariosForEntity_Call{Call: _e.mock.On("AvailableScenariosForEntity", entity)}
}

func (_c *GcpMGCPInterface_AvailableScenariosForEntity_Call) Run(run func(entity spine_goapi.EntityRemoteInterface)) *GcpMGCPInterface_AvailableScenariosForEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface))
	})
	return _c
}

func (_c *GcpMGCPInterface_AvailableScenariosForEntity_Call) Return(_a0 []uint) *GcpMGCPInterface_AvailableScenariosForEntity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GcpMGCPInterface_AvailableScenariosForEntity_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface) []uint) *GcpMGCPInterface_AvailableScenariosForEntity_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentPerPhase provides a mock function with given fields: entity
func (_m *GcpMGCPInterface) CurrentPerPhase(entity spine_goapi.EntityRemoteInterface) ([]float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for CurrentPerPhase")
	}

	var r0 []float64
	var r1 error
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) ([]float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) []float64); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(spine_goapi.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GcpMGCPInterface_CurrentPerPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentPerPhase'
type GcpMGCPInterface_CurrentPerPhase_Call struct {
	*mock.Call
}

// CurrentPerPhase is a helper method to define mock.On call
//   - entity spine_goapi.EntityRemoteInterface
func (_e *GcpMGCPInterface_Expecter) CurrentPerPhase(entity interface{}) *GcpMGCPInterface_CurrentPerPhase_Call {
	return &GcpMGCPInterface_CurrentPerPhase_Call{Call: _e.mock.On("CurrentPerPhase", entity)}
}

func (_c *GcpMGCPInterface_CurrentPerPhase_Call) Run(run func(entity spine_goapi.EntityRemoteInterface)) *GcpMGCPInterface_CurrentPerPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface))
	})
	return _c
}

func (_c *GcpMGCPInterface_CurrentPerPhase_Call) Return(_a0 []float64, _a1 error) *GcpMGCPInterface_CurrentPerPhase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GcpMGCPInterface_CurrentPerPhase_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface) ([]float64, error)) *GcpMGCPInterface_CurrentPerPhase_Call {
	_c.Call.Return(run)
	return _c
}

// EnergyConsumed provides a mock function with given fields: entity
func (_m *GcpMGCPInterface) EnergyConsumed(entity spine_goapi.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for EnergyConsumed")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(spine_goapi.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GcpMGCPInterface_EnergyConsumed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnergyConsumed'
type GcpMGCPInterface_EnergyConsumed_Call struct {
	*mock.Call
}

// EnergyConsumed is a helper method to define mock.On call
//   - entity spine_goapi.EntityRemoteInterface
func (_e *GcpMGCPInterface_Expecter) EnergyConsumed(entity interface{}) *GcpMGCPInterface_EnergyConsumed_Call {
	return &GcpMGCPInterface_EnergyConsumed_Call{Call: _e.mock.On("EnergyConsumed", entity)}
}

func (_c *GcpMGCPInterface_EnergyConsumed_Call) Run(run func(entity spine_goapi.EntityRemoteInterface)) *GcpMGCPInterface_EnergyConsumed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface))
	})
	return _c
}

func (_c *GcpMGCPInterface_EnergyConsumed_Call) Return(_a0 float64, _a1 error) *GcpMGCPInterface_EnergyConsumed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GcpMGCPInterface_EnergyConsumed_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface) (float64, error)) *GcpMGCPInterface_EnergyConsumed_Call {
	_c.Call.Return(run)
	return _c
}

// EnergyFeedIn provides a mock function with given fields: entity
func (_m *GcpMGCPInterface) EnergyFeedIn(entity spine_goapi.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for EnergyFeedIn")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(spine_goapi.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GcpMGCPInterface_EnergyFeedIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnergyFeedIn'
type GcpMGCPInterface_EnergyFeedIn_Call struct {
	*mock.Call
}

// EnergyFeedIn is a helper method to define mock.On call
//   - entity spine_goapi.EntityRemoteInterface
func (_e *GcpMGCPInterface_Expecter) EnergyFeedIn(entity interface{}) *GcpMGCPInterface_EnergyFeedIn_Call {
	return &GcpMGCPInterface_EnergyFeedIn_Call{Call: _e.mock.On("EnergyFeedIn", entity)}
}

func (_c *GcpMGCPInterface_EnergyFeedIn_Call) Run(run func(entity spine_goapi.EntityRemoteInterface)) *GcpMGCPInterface_EnergyFeedIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface))
	})
	return _c
}

func (_c *GcpMGCPInterface_EnergyFeedIn_Call) Return(_a0 float64, _a1 error) *GcpMGCPInterface_EnergyFeedIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GcpMGCPInterface_EnergyFeedIn_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface) (float64, error)) *GcpMGCPInterface_EnergyFeedIn_Call {
	_c.Call.Return(run)
	return _c
}

// Frequency provides a mock function with given fields: entity
func (_m *GcpMGCPInterface) Frequency(entity spine_goapi.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Frequency")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(spine_goapi.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GcpMGCPInterface_Frequency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Frequency'
type GcpMGCPInterface_Frequency_Call struct {
	*mock.Call
}

// Frequency is a helper method to define mock.On call
//   - entity spine_goapi.EntityRemoteInterface
func (_e *GcpMGCPInterface_Expecter) Frequency(entity interface{}) *GcpMGCPInterface_Frequency_Call {
	return &GcpMGCPInterface_Frequency_Call{Call: _e.mock.On("Frequency", entity)}
}

func (_c *GcpMGCPInterface_Frequency_Call) Run(run func(entity spine_goapi.EntityRemoteInterface)) *GcpMGCPInterface_Frequency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface))
	})
	return _c
}

func (_c *GcpMGCPInterface_Frequency_Call) Return(_a0 float64, _a1 error) *GcpMGCPInterface_Frequency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GcpMGCPInterface_Frequency_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface) (float64, error)) *GcpMGCPInterface_Frequency_Call {
	_c.Call.Return(run)
	return _c
}

// IsCompatibleEntityType provides a mock function with given fields: entity
func (_m *GcpMGCPInterface) IsCompatibleEntityType(entity spine_goapi.EntityRemoteInterface) bool {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for IsCompatibleEntityType")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) bool); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GcpMGCPInterface_IsCompatibleEntityType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCompatibleEntityType'
type GcpMGCPInterface_IsCompatibleEntityType_Call struct {
	*mock.Call
}

// IsCompatibleEntityType is a helper method to define mock.On call
//   - entity spine_goapi.EntityRemoteInterface
func (_e *GcpMGCPInterface_Expecter) IsCompatibleEntityType(entity interface{}) *GcpMGCPInterface_IsCompatibleEntityType_Call {
	return &GcpMGCPInterface_IsCompatibleEntityType_Call{Call: _e.mock.On("IsCompatibleEntityType", entity)}
}

func (_c *GcpMGCPInterface_IsCompatibleEntityType_Call) Run(run func(entity spine_goapi.EntityRemoteInterface)) *GcpMGCPInterface_IsCompatibleEntityType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface))
	})
	return _c
}

func (_c *GcpMGCPInterface_IsCompatibleEntityType_Call) Return(_a0 bool) *GcpMGCPInterface_IsCompatibleEntityType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GcpMGCPInterface_IsCompatibleEntityType_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface) bool) *GcpMGCPInterface_IsCompatibleEntityType_Call {
	_c.Call.Return(run)
	return _c
}

// IsScenarioAvailableAtEntity provides a mock function with given fields: entity, scenario
func (_m *GcpMGCPInterface) IsScenarioAvailableAtEntity(entity spine_goapi.EntityRemoteInterface, scenario uint) bool {
	ret := _m.Called(entity, scenario)

	if len(ret) == 0 {
		panic("no return value specified for IsScenarioAvailableAtEntity")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface, uint) bool); ok {
		r0 = rf(entity, scenario)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GcpMGCPInterface_IsScenarioAvailableAtEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsScenarioAvailableAtEntity'
type GcpMGCPInterface_IsScenarioAvailableAtEntity_Call struct {
	*mock.Call
}

// IsScenarioAvailableAtEntity is a helper method to define mock.On call
//   - entity spine_goapi.EntityRemoteInterface
//   - scenario uint
func (_e *GcpMGCPInterface_Expecter) IsScenarioAvailableAtEntity(entity interface{}, scenario interface{}) *GcpMGCPInterface_IsScenarioAvailableAtEntity_Call {
	return &GcpMGCPInterface_IsScenarioAvailableAtEntity_Call{Call: _e.mock.On("IsScenarioAvailableAtEntity", entity, scenario)}
}

func (_c *GcpMGCPInterface_IsScenarioAvailableAtEntity_Call) Run(run func(entity spine_goapi.EntityRemoteInterface, scenario uint)) *GcpMGCPInterface_IsScenarioAvailableAtEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface), args[1].(uint))
	})
	return _c
}

func (_c *GcpMGCPInterface_IsScenarioAvailableAtEntity_Call) Return(_a0 bool) *GcpMGCPInterface_IsScenarioAvailableAtEntity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GcpMGCPInterface_IsScenarioAvailableAtEntity_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface, uint) bool) *GcpMGCPInterface_IsScenarioAvailableAtEntity_Call {
	_c.Call.Return(run)
	return _c
}

// Power provides a mock function with given fields: entity
func (_m *GcpMGCPInterface) Power(entity spine_goapi.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Power")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(spine_goapi.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GcpMGCPInterface_Power_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Power'
type GcpMGCPInterface_Power_Call struct {
	*mock.Call
}

// Power is a helper method to define mock.On call
//   - entity spine_goapi.EntityRemoteInterface
func (_e *GcpMGCPInterface_Expecter) Power(entity interface{}) *GcpMGCPInterface_Power_Call {
	return &GcpMGCPInterface_Power_Call{Call: _e.mock.On("Power", entity)}
}

func (_c *GcpMGCPInterface_Power_Call) Run(run func(entity spine_goapi.EntityRemoteInterface)) *GcpMGCPInterface_Power_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface))
	})
	return _c
}

func (_c *GcpMGCPInterface_Power_Call) Return(_a0 float64, _a1 error) *GcpMGCPInterface_Power_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GcpMGCPInterface_Power_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface) (float64, error)) *GcpMGCPInterface_Power_Call {
	_c.Call.Return(run)
	return _c
}

// PowerLimitationFactor provides a mock function with given fields: entity
func (_m *GcpMGCPInterface) PowerLimitationFactor(entity spine_goapi.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for PowerLimitationFactor")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(spine_goapi.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GcpMGCPInterface_PowerLimitationFactor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PowerLimitationFactor'
type GcpMGCPInterface_PowerLimitationFactor_Call struct {
	*mock.Call
}

// PowerLimitationFactor is a helper method to define mock.On call
//   - entity spine_goapi.EntityRemoteInterface
func (_e *GcpMGCPInterface_Expecter) PowerLimitationFactor(entity interface{}) *GcpMGCPInterface_PowerLimitationFactor_Call {
	return &GcpMGCPInterface_PowerLimitationFactor_Call{Call: _e.mock.On("PowerLimitationFactor", entity)}
}

func (_c *GcpMGCPInterface_PowerLimitationFactor_Call) Run(run func(entity spine_goapi.EntityRemoteInterface)) *GcpMGCPInterface_PowerLimitationFactor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface))
	})
	return _c
}

func (_c *GcpMGCPInterface_PowerLimitationFactor_Call) Return(_a0 float64, _a1 error) *GcpMGCPInterface_PowerLimitationFactor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GcpMGCPInterface_PowerLimitationFactor_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface) (float64, error)) *GcpMGCPInterface_PowerLimitationFactor_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteEntitiesScenarios provides a mock function with given fields:
func (_m *GcpMGCPInterface) RemoteEntitiesScenarios() []eebus_goapi.RemoteEntityScenarios {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoteEntitiesScenarios")
	}

	var r0 []eebus_goapi.RemoteEntityScenarios
	if rf, ok := ret.Get(0).(func() []eebus_goapi.RemoteEntityScenarios); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]eebus_goapi.RemoteEntityScenarios)
		}
	}

	return r0
}

// GcpMGCPInterface_RemoteEntitiesScenarios_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteEntitiesScenarios'
type GcpMGCPInterface_RemoteEntitiesScenarios_Call struct {
	*mock.Call
}

// RemoteEntitiesScenarios is a helper method to define mock.On call
func (_e *GcpMGCPInterface_Expecter) RemoteEntitiesScenarios() *GcpMGCPInterface_RemoteEntitiesScenarios_Call {
	return &GcpMGCPInterface_RemoteEntitiesScenarios_Call{Call: _e.mock.On("RemoteEntitiesScenarios")}
}

func (_c *GcpMGCPInterface_RemoteEntitiesScenarios_Call) Run(run func()) *GcpMGCPInterface_RemoteEntitiesScenarios_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GcpMGCPInterface_RemoteEntitiesScenarios_Call) Return(_a0 []eebus_goapi.RemoteEntityScenarios) *GcpMGCPInterface_RemoteEntitiesScenarios_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GcpMGCPInterface_RemoteEntitiesScenarios_Call) RunAndReturn(run func() []eebus_goapi.RemoteEntityScenarios) *GcpMGCPInterface_RemoteEntitiesScenarios_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUseCase provides a mock function with given fields:
func (_m *GcpMGCPInterface) RemoveUseCase() {
	_m.Called()
}

// GcpMGCPInterface_RemoveUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUseCase'
type GcpMGCPInterface_RemoveUseCase_Call struct {
	*mock.Call
}

// RemoveUseCase is a helper method to define mock.On call
func (_e *GcpMGCPInterface_Expecter) RemoveUseCase() *GcpMGCPInterface_RemoveUseCase_Call {
	return &GcpMGCPInterface_RemoveUseCase_Call{Call: _e.mock.On("RemoveUseCase")}
}

func (_c *GcpMGCPInterface_RemoveUseCase_Call) Run(run func()) *GcpMGCPInterface_RemoveUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GcpMGCPInterface_RemoveUseCase_Call) Return() *GcpMGCPInterface_RemoveUseCase_Call {
	_c.Call.Return()
	return _c
}

func (_c *GcpMGCPInterface_RemoveUseCase_Call) RunAndReturn(run func()) *GcpMGCPInterface_RemoveUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUseCaseAvailability provides a mock function with given fields: available
func (_m *GcpMGCPInterface) UpdateUseCaseAvailability(available bool) {
	_m.Called(available)
}

// GcpMGCPInterface_UpdateUseCaseAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUseCaseAvailability'
type GcpMGCPInterface_UpdateUseCaseAvailability_Call struct {
	*mock.Call
}

// UpdateUseCaseAvailability is a helper method to define mock.On call
//   - available bool
func (_e *GcpMGCPInterface_Expecter) UpdateUseCaseAvailability(available interface{}) *GcpMGCPInterface_UpdateUseCaseAvailability_Call {
	return &GcpMGCPInterface_UpdateUseCaseAvailability_Call{Call: _e.mock.On("UpdateUseCaseAvailability", available)}
}

func (_c *GcpMGCPInterface_UpdateUseCaseAvailability_Call) Run(run func(available bool)) *GcpMGCPInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *GcpMGCPInterface_UpdateUseCaseAvailability_Call) Return() *GcpMGCPInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return()
	return _c
}

func (_c *GcpMGCPInterface_UpdateUseCaseAvailability_Call) RunAndReturn(run func(bool)) *GcpMGCPInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return(run)
	return _c
}

// VoltagePerPhase provides a mock function with given fields: entity
func (_m *GcpMGCPInterface) VoltagePerPhase(entity spine_goapi.EntityRemoteInterface) ([]float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for VoltagePerPhase")
	}

	var r0 []float64
	var r1 error
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) ([]float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) []float64); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(spine_goapi.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GcpMGCPInterface_VoltagePerPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VoltagePerPhase'
type GcpMGCPInterface_VoltagePerPhase_Call struct {
	*mock.Call
}

// VoltagePerPhase is a helper method to define mock.On call
//   - entity spine_goapi.EntityRemoteInterface
func (_e *GcpMGCPInterface_Expecter) VoltagePerPhase(entity interface{}) *GcpMGCPInterface_VoltagePerPhase_Call {
	return &GcpMGCPInterface_VoltagePerPhase_Call{Call: _e.mock.On("VoltagePerPhase", entity)}
}

func (_c *GcpMGCPInterface_VoltagePerPhase_Call) Run(run func(entity spine_goapi.EntityRemoteInterface)) *GcpMGCPInterface_VoltagePerPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface))
	})
	return _c
}

func (_c *GcpMGCPInterface_VoltagePerPhase_Call) Return(_a0 []float64, _a1 error) *GcpMGCPInterface_VoltagePerPhase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GcpMGCPInterface_VoltagePerPhase_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface) ([]float64, error)) *GcpMGCPInterface_VoltagePerPhase_Call {
	_c.Call.Return(run)
	return _c
}

// NewGcpMGCPInterface creates a new instance of GcpMGCPInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGcpMGCPInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GcpMGCPInterface {
	mock := &GcpMGCPInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
